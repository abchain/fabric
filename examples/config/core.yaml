###############################################################################
#
#    LOGGING section
#
###############################################################################
logging:

    # Default logging levels are specified here for each of the three peer
    # commands 'node', 'network' and 'chaincode'. For commands that have
    # subcommands, the defaults also apply to all subcommands of the command.
    # Valid logging levels are case-insensitive strings chosen from

    #     CRITICAL | ERROR | WARNING | NOTICE | INFO | DEBUG

    # The logging levels specified here can be overridden in various ways,
    # listed below from strongest to weakest:
    #
    # 1. The --logging-level=<level> command line option overrides all other
    #    specifications.
    #
    # 2. The environment variable CORE_LOGGING_LEVEL otherwise applies to
    #    all peer commands if defined as a non-empty string.
    #
    # 3. The environment variables CORE_LOGGING_[NODE|NETWORK|CHAINCODE]
    #    otherwise apply to the respective peer commands if defined as non-empty
    #    strings.
    #
    # 4. Otherwise, the specifications below apply.
    #
    # Developers: Please see fabric/docs/Setup/logging-control.md for more
    # options.
    node: info:consensus/framework,txhandler,ledger=debug

###############################################################################
consensus:
    base:
        triggertime: 500

###############################################################################
node:

    # Path on the file system where peer will store data
    fileSystemPath: 'YOURPATH'

    # Setting for runtime.GOMAXPROCS(n). If n < 1, it does not change the current setting
    gomaxprocs: -1
    workers: 2

    # rocksdb configurations
    db:
        # 10485760 = 10M
        maxLogFileSize: 10485760
        keepLogFileNum: 10
        logLevel: "warn"
        perBlockPerCheckpoint: true
        #version: 0
    
    api:
        disabled: false
        address: 127.0.0.1:7053
        service:
        chain:
        admin:
            disabled: true
        events:
            # total number of events that could be buffered without blocking the
            # validator sends
            buffersize: 100
            # milliseconds timeout for producer to send an event.
            # if < 0, if buffer full, unblocks immediately and not send
            # if 0, if buffer full, will block and guarantee the event will be sent out
            # if > 0, if buffer full, blocks till timeout
            timeout: 10

###############################################################################
peer:
    # the Peer's server point configuration
    # The Address server point DECLARE to other peers, i.e. the "external" address
    address: 127.0.0.1:7055
    # The Address server point will listen on, which is optional (server point will
    # just bind on the addr specified by "address")
    listenAddress: 127.0.0.1:7055
    # whether the server point should programmatically determine the address to bind to.
    addressAutoDetect: false

    # the tls sub-section for server point
    tls:
        # enable
        enabled: false
        # path of certifications
        file:
            # the root cert it used when serverpoint is used by a client
            rootcert:
            cert: 
            key: 
        # The server name use to verify the hostname returned by TLS handshake
        serverhostoverride:


    # The peer id
    id: vp0

    # Peer discovery settings.  Controls how this peer discovers other peers
    discovery:

        # The root nodes are used for bootstrapping purposes, and generally
        # supplied through ENV variables
        # It can be either a single host or a comma separated list of hosts.
        rootnode:

        # The duration of time between attempts to asks peers for their connected peers
        period:  5s
        # Should the discovered nodes and their reputations
        # be stored in DB and persisted between restarts
        persist:    false
        # the period in seconds with which the discovery
        # tries to reconnect to successful nodes
        # 0 means the nodes are not reconnected
        touchPeriod: 6s
        # the maximum nuber of nodes to reconnect to
        # -1 for unlimited
        touchMaxNodes: 100
        # Running in hidden mode for node discovery
        # Node will connect to root nodes only
        hidden: false
        #Abolished the discovered function of the node and retained the function of detecting other nodes
        disable: false


###############################################################################
sync:
    # the maxium count which server will build syncing session with clients at
    # the same time
    maxconcurrent: 10

    # when a client is syncing transactions, the max count of txs that 
    # server allow to transport in one response. If client request a series
    # tx ids larger than this count, it will obtained at most <txconcurrent>
    # transactions for its request
    txconcurrent: 150

    # the transfering window in a session. i.e. server will keep at most
    # <transportwin> packages in the wire and do not deliver more data until
    # an acking is received from client
    transportwin: 3

    # how many seconds server will disconnect current session to a client if
    # no request or other data is received
    idletimeout: 10

    # how many requestes server is pending for responsing at the same time
    maxpending: 5

###############################################################################
ledger:

    sanitycheck: false

    blockchain:

    state:
        # Control the number state deltas that are maintained. This takes additional
        # disk space, but allow the state to be rolled backwards and forwards
        # without the need to replay transactions.
        deltaHistorySize: 500

        # The data structure in which the state will be stored. Different data
        # structures may offer different performance characteristics.
        # Options are 'buckettree', 'trie' and 'raw'.
        # ( Note:'raw' is experimental and incomplete. )
        # If not set, the default data structure is the 'buckettree'.
        # This CANNOT be changed after the DB has been created.
        dataStructure:
        # The name of the data structure is for storing the state
        name: buckettree
        # The data structure specific configurations
        configs:
            # configurations for 'bucketree'. These CANNOT be changed after the DB
            # has been created. 'numBuckets' defines the number of bins that the
            # state key-values are to be divided
            numBuckets: 1000003
            # 'maxGroupingAtEachLevel' defines the number of bins that are grouped
            #together to construct next level of the merkle-tree (this is applied
            # repeatedly for constructing the entire tree).
            maxGroupingAtEachLevel: 5
            # 'bucketCacheSize' defines the size (in MBs) of the cache that is used to keep
            # the buckets (from root upto secondlast level) in memory. This cache helps
            # in making state hash computation faster. A value less than or equals to zero
            # leads to disabling this caching. This caching helps more if transactions
            # perform significant writes.
            bucketCacheSize: 100

            # configurations for 'trie'
            # 'tire' has no additional configurations exposed as yet

###############################################################################
sync:
    # the maxium count which server will build syncing session with clients at
    # the same time
    maxconcurrent: 10

    # when a client is syncing transactions, the max count of txs that 
    # server allow to transport in one response. If client request a series
    # tx ids larger than this count, it will obtained at most <txconcurrent>
    # transactions for its request
    txconcurrent: 150

    # the transfering window in a session. i.e. server will keep at most
    # <transportwin> packages in the wire and do not deliver more data until
    # an acking is received from client
    transportwin: 3

    # how many seconds server will disconnect current session to a client if
    # no request or other data is received
    idletimeout: 10

    # how many requestes server is pending for responsing at the same time
    maxpending: 5

###############################################################################
chaincode:

    # The id is used by the Chaincode stub to register the executing Chaincode
    # ID with the Peerand is generally supplied through ENV variables
    # the Path form of ID is provided when deploying the chaincode. The name is
    # used for all other requests. The name is really a hashcode
    # returned by the system in response to the deploy transaction. In
    # development mode where user runs the chaincode, the name can be any string
    id:
        path:
        name:

    golang:

        # This is the basis for the Golang Dockerfile.  Additional commands will
        # be appended depedendent upon the chaincode specification.
        Dockerfile:  |
            from hyperledger/fabric-baseimage
            #from utxo:0.1.0
            COPY src $GOPATH/src
            WORKDIR $GOPATH

    car:

        # This is the basis for the CAR Dockerfile.  Additional commands will
        # be appended depedendent upon the chaincode specification.
        Dockerfile:  |
            FROM hyperledger/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)

    java:
        # This is an image based on java:openjdk-8 with addition compiler
        # tools added for java shim layer packaging.
        # This image is packed with shim layer libraries that are necessary
        # for Java chaincode runtime.
        Dockerfile:  |
            from hyperledger/fabric-javaenv:$(ARCH)-$(PROJECT_VERSION)

    # timeout in millisecs for starting up a container and waiting for Register
    # to come through. 1sec should be plenty for chaincode unit tests
    startuptimeout: 300000

    # timeout in millisecs for deploying chaincode from a remote repository.
    deploytimeout: 30000
    exectimeout: 30000

    # mode - options are "dev", "net", "native"
    # dev - in dev mode, user runs the chaincode after starting validator from
    # command line on local machine
    # net - in net mode validator will run chaincode in a docker container
    # native - the chaincode source code is built in with peer process
    # and runs on peer starting up

    mode: native
    # mode: net
    # typically installpath should not be modified. Otherwise, user must ensure
    # the chaincode executable is placed in the path specifed by installpath in
    # the image
    installpath:

    # keepalive in seconds. In situations where the communiction goes through a
    # proxy that does not support keep-alive, this parameter will maintain connection
    # between peer and chaincode.
    # A value <= 0 turns keepalive off
    keepalive: 0
