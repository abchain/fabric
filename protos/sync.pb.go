// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sync.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SyncType int32

const (
	SyncType_UNDEFINED      SyncType = 0
	SyncType_SYNC_BLOCK     SyncType = 1
	SyncType_SYNC_BLOCK_ACK SyncType = 2
	SyncType_SYNC_STATE     SyncType = 3
	SyncType_SYNC_STATE_ACK SyncType = 4
)

var SyncType_name = map[int32]string{
	0: "UNDEFINED",
	1: "SYNC_BLOCK",
	2: "SYNC_BLOCK_ACK",
	3: "SYNC_STATE",
	4: "SYNC_STATE_ACK",
}
var SyncType_value = map[string]int32{
	"UNDEFINED":      0,
	"SYNC_BLOCK":     1,
	"SYNC_BLOCK_ACK": 2,
	"SYNC_STATE":     3,
	"SYNC_STATE_ACK": 4,
}

func (x SyncType) String() string {
	return proto.EnumName(SyncType_name, int32(x))
}
func (SyncType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type SyncMsg_Type int32

const (
	SyncMsg_UNDEFINED                     SyncMsg_Type = 0
	SyncMsg_SYNC_STATE_NOTIFY             SyncMsg_Type = 1
	SyncMsg_SYNC_STATE_OPT                SyncMsg_Type = 2
	SyncMsg_SYNC_SESSION_START            SyncMsg_Type = 3
	SyncMsg_SYNC_SESSION_START_ACK        SyncMsg_Type = 4
	SyncMsg_SYNC_SESSION_QUERY            SyncMsg_Type = 5
	SyncMsg_SYNC_SESSION_QUERY_ACK        SyncMsg_Type = 6
	SyncMsg_SYNC_SESSION_END              SyncMsg_Type = 8
	SyncMsg_SYNC_SESSION_DELTAS           SyncMsg_Type = 16
	SyncMsg_SYNC_SESSION_DELTAS_ACK       SyncMsg_Type = 17
	SyncMsg_SYNC_SESSION_SYNC_MESSAGE     SyncMsg_Type = 18
	SyncMsg_SYNC_SESSION_SYNC_MESSAGE_ACK SyncMsg_Type = 19
)

var SyncMsg_Type_name = map[int32]string{
	0:  "UNDEFINED",
	1:  "SYNC_STATE_NOTIFY",
	2:  "SYNC_STATE_OPT",
	3:  "SYNC_SESSION_START",
	4:  "SYNC_SESSION_START_ACK",
	5:  "SYNC_SESSION_QUERY",
	6:  "SYNC_SESSION_QUERY_ACK",
	8:  "SYNC_SESSION_END",
	16: "SYNC_SESSION_DELTAS",
	17: "SYNC_SESSION_DELTAS_ACK",
	18: "SYNC_SESSION_SYNC_MESSAGE",
	19: "SYNC_SESSION_SYNC_MESSAGE_ACK",
}
var SyncMsg_Type_value = map[string]int32{
	"UNDEFINED":                     0,
	"SYNC_STATE_NOTIFY":             1,
	"SYNC_STATE_OPT":                2,
	"SYNC_SESSION_START":            3,
	"SYNC_SESSION_START_ACK":        4,
	"SYNC_SESSION_QUERY":            5,
	"SYNC_SESSION_QUERY_ACK":        6,
	"SYNC_SESSION_END":              8,
	"SYNC_SESSION_DELTAS":           16,
	"SYNC_SESSION_DELTAS_ACK":       17,
	"SYNC_SESSION_SYNC_MESSAGE":     18,
	"SYNC_SESSION_SYNC_MESSAGE_ACK": 19,
}

func (x SyncMsg_Type) String() string {
	return proto.EnumName(SyncMsg_Type_name, int32(x))
}
func (SyncMsg_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{9, 0} }

type GlobalState struct {
	Count                   uint64   `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	NextNodeStateHash       [][]byte `protobuf:"bytes,3,rep,name=nextNodeStateHash,proto3" json:"nextNodeStateHash,omitempty"`
	ParentNodeStateHash     [][]byte `protobuf:"bytes,4,rep,name=parentNodeStateHash,proto3" json:"parentNodeStateHash,omitempty"`
	LastBranchNodeStateHash []byte   `protobuf:"bytes,5,opt,name=lastBranchNodeStateHash,proto3" json:"lastBranchNodeStateHash,omitempty"`
	NextBranchNodeStateHash []byte   `protobuf:"bytes,7,opt,name=nextBranchNodeStateHash,proto3" json:"nextBranchNodeStateHash,omitempty"`
}

func (m *GlobalState) Reset()                    { *m = GlobalState{} }
func (m *GlobalState) String() string            { return proto.CompactTextString(m) }
func (*GlobalState) ProtoMessage()               {}
func (*GlobalState) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *GlobalState) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GlobalState) GetNextNodeStateHash() [][]byte {
	if m != nil {
		return m.NextNodeStateHash
	}
	return nil
}

func (m *GlobalState) GetParentNodeStateHash() [][]byte {
	if m != nil {
		return m.ParentNodeStateHash
	}
	return nil
}

func (m *GlobalState) GetLastBranchNodeStateHash() []byte {
	if m != nil {
		return m.LastBranchNodeStateHash
	}
	return nil
}

func (m *GlobalState) GetNextBranchNodeStateHash() []byte {
	if m != nil {
		return m.NextBranchNodeStateHash
	}
	return nil
}

// BlockState is the payload of Message.SYNC_BLOCK_ADDED. When a VP
// commits a new block to the ledger, it will notify its connected NVPs of the
// block and the delta state. The NVP may call the ledger APIs to apply the
// block and the delta state to its ledger if the block's previousBlockHash
// equals to the NVP's current block hash
type BlockState struct {
	Block      *Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	StateDelta []byte `protobuf:"bytes,2,opt,name=stateDelta,proto3" json:"stateDelta,omitempty"`
	Height     uint64 `protobuf:"varint,3,opt,name=Height" json:"Height,omitempty"`
}

func (m *BlockState) Reset()                    { *m = BlockState{} }
func (m *BlockState) String() string            { return proto.CompactTextString(m) }
func (*BlockState) ProtoMessage()               {}
func (*BlockState) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *BlockState) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockState) GetStateDelta() []byte {
	if m != nil {
		return m.StateDelta
	}
	return nil
}

func (m *BlockState) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// SyncBlockRange is the payload of Message.SYNC_GET_BLOCKS, where
// start and end indicate the starting and ending blocks inclusively. The order
// in which blocks are returned is defined by the start and end values. For
// example, if start=3 and end=5, the order of blocks will be 3, 4, 5.
// If start=5 and end=3, the order will be 5, 4, 3.
type SyncBlockRange struct {
	CorrelationId uint64 `protobuf:"varint,1,opt,name=correlationId" json:"correlationId,omitempty"`
	Start         uint64 `protobuf:"varint,2,opt,name=start" json:"start,omitempty"`
	End           uint64 `protobuf:"varint,3,opt,name=end" json:"end,omitempty"`
}

func (m *SyncBlockRange) Reset()                    { *m = SyncBlockRange{} }
func (m *SyncBlockRange) String() string            { return proto.CompactTextString(m) }
func (*SyncBlockRange) ProtoMessage()               {}
func (*SyncBlockRange) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *SyncBlockRange) GetCorrelationId() uint64 {
	if m != nil {
		return m.CorrelationId
	}
	return 0
}

func (m *SyncBlockRange) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *SyncBlockRange) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

// SyncBlocks is the payload of Message.SYNC_BLOCKS, where the range
// indicates the blocks responded to the request SYNC_GET_BLOCKS
type SyncBlocks struct {
	Range  *SyncBlockRange `protobuf:"bytes,1,opt,name=range" json:"range,omitempty"`
	Blocks []*Block        `protobuf:"bytes,2,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *SyncBlocks) Reset()                    { *m = SyncBlocks{} }
func (m *SyncBlocks) String() string            { return proto.CompactTextString(m) }
func (*SyncBlocks) ProtoMessage()               {}
func (*SyncBlocks) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *SyncBlocks) GetRange() *SyncBlockRange {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *SyncBlocks) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

// SyncSnapshotRequest Payload for the penchainMessage.SYNC_GET_SNAPSHOT message.
type SyncStateSnapshotRequest struct {
	CorrelationId uint64 `protobuf:"varint,1,opt,name=correlationId" json:"correlationId,omitempty"`
}

func (m *SyncStateSnapshotRequest) Reset()                    { *m = SyncStateSnapshotRequest{} }
func (m *SyncStateSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncStateSnapshotRequest) ProtoMessage()               {}
func (*SyncStateSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *SyncStateSnapshotRequest) GetCorrelationId() uint64 {
	if m != nil {
		return m.CorrelationId
	}
	return 0
}

// SyncStateSnapshot is the payload of Message.SYNC_SNAPSHOT, which is a response
// to penchainMessage.SYNC_GET_SNAPSHOT. It contains the snapshot or a chunk of the
// snapshot on stream, and in which case, the sequence indicate the order
// starting at 0.  The terminating message will have len(delta) == 0.
type SyncStateSnapshot struct {
	Delta       []byte                    `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
	Sequence    uint64                    `protobuf:"varint,2,opt,name=sequence" json:"sequence,omitempty"`
	BlockNumber uint64                    `protobuf:"varint,3,opt,name=blockNumber" json:"blockNumber,omitempty"`
	Request     *SyncStateSnapshotRequest `protobuf:"bytes,4,opt,name=request" json:"request,omitempty"`
}

func (m *SyncStateSnapshot) Reset()                    { *m = SyncStateSnapshot{} }
func (m *SyncStateSnapshot) String() string            { return proto.CompactTextString(m) }
func (*SyncStateSnapshot) ProtoMessage()               {}
func (*SyncStateSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

func (m *SyncStateSnapshot) GetDelta() []byte {
	if m != nil {
		return m.Delta
	}
	return nil
}

func (m *SyncStateSnapshot) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *SyncStateSnapshot) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *SyncStateSnapshot) GetRequest() *SyncStateSnapshotRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SyncStateDeltasRequest is the payload of Message.SYNC_GET_STATE.
// blockNumber indicates the block number for the delta which is being
// requested. If no payload is included with SYNC_GET_STATE, it represents
// a request for a snapshot of the current state.
type SyncStateDeltasRequest struct {
	Range *SyncBlockRange `protobuf:"bytes,1,opt,name=range" json:"range,omitempty"`
}

func (m *SyncStateDeltasRequest) Reset()                    { *m = SyncStateDeltasRequest{} }
func (m *SyncStateDeltasRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncStateDeltasRequest) ProtoMessage()               {}
func (*SyncStateDeltasRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

func (m *SyncStateDeltasRequest) GetRange() *SyncBlockRange {
	if m != nil {
		return m.Range
	}
	return nil
}

// SyncStateDeltas is the payload of the Message.SYNC_STATE in response to
// the Message.SYNC_GET_STATE message.
type SyncStateDeltas struct {
	Range  *SyncBlockRange `protobuf:"bytes,1,opt,name=range" json:"range,omitempty"`
	Deltas [][]byte        `protobuf:"bytes,2,rep,name=deltas,proto3" json:"deltas,omitempty"`
}

func (m *SyncStateDeltas) Reset()                    { *m = SyncStateDeltas{} }
func (m *SyncStateDeltas) String() string            { return proto.CompactTextString(m) }
func (*SyncStateDeltas) ProtoMessage()               {}
func (*SyncStateDeltas) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

func (m *SyncStateDeltas) GetRange() *SyncBlockRange {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *SyncStateDeltas) GetDeltas() [][]byte {
	if m != nil {
		return m.Deltas
	}
	return nil
}

type SyncBlockState struct {
	Range    *SyncBlockRange `protobuf:"bytes,1,opt,name=range" json:"range,omitempty"`
	Syncdata []*BlockState   `protobuf:"bytes,2,rep,name=syncdata" json:"syncdata,omitempty"`
}

func (m *SyncBlockState) Reset()                    { *m = SyncBlockState{} }
func (m *SyncBlockState) String() string            { return proto.CompactTextString(m) }
func (*SyncBlockState) ProtoMessage()               {}
func (*SyncBlockState) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{8} }

func (m *SyncBlockState) GetRange() *SyncBlockRange {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *SyncBlockState) GetSyncdata() []*BlockState {
	if m != nil {
		return m.Syncdata
	}
	return nil
}

// Like chat, stateSync wrap messages used in a syncing session
type SyncMsg struct {
	Type          SyncMsg_Type `protobuf:"varint,1,opt,name=type,enum=protos.SyncMsg_Type" json:"type,omitempty"`
	CorrelationId uint64       `protobuf:"varint,2,opt,name=correlationId" json:"correlationId,omitempty"`
	Payload       []byte       `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *SyncMsg) Reset()                    { *m = SyncMsg{} }
func (m *SyncMsg) String() string            { return proto.CompactTextString(m) }
func (*SyncMsg) ProtoMessage()               {}
func (*SyncMsg) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{9} }

func (m *SyncMsg) GetType() SyncMsg_Type {
	if m != nil {
		return m.Type
	}
	return SyncMsg_UNDEFINED
}

func (m *SyncMsg) GetCorrelationId() uint64 {
	if m != nil {
		return m.CorrelationId
	}
	return 0
}

func (m *SyncMsg) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// //////////////////////////////
type SyncStateQuery struct {
	Id          uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BlockHeight uint64 `protobuf:"varint,2,opt,name=blockHeight" json:"blockHeight,omitempty"`
}

func (m *SyncStateQuery) Reset()                    { *m = SyncStateQuery{} }
func (m *SyncStateQuery) String() string            { return proto.CompactTextString(m) }
func (*SyncStateQuery) ProtoMessage()               {}
func (*SyncStateQuery) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{10} }

func (m *SyncStateQuery) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SyncStateQuery) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type SyncStateResp struct {
	Id          uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Postive     bool   `protobuf:"varint,3,opt,name=postive" json:"postive,omitempty"`
	Statehash   []byte `protobuf:"bytes,4,opt,name=statehash,proto3" json:"statehash,omitempty"`
	BlockHeight uint64 `protobuf:"varint,5,opt,name=blockHeight" json:"blockHeight,omitempty"`
}

func (m *SyncStateResp) Reset()                    { *m = SyncStateResp{} }
func (m *SyncStateResp) String() string            { return proto.CompactTextString(m) }
func (*SyncStateResp) ProtoMessage()               {}
func (*SyncStateResp) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{11} }

func (m *SyncStateResp) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SyncStateResp) GetPostive() bool {
	if m != nil {
		return m.Postive
	}
	return false
}

func (m *SyncStateResp) GetStatehash() []byte {
	if m != nil {
		return m.Statehash
	}
	return nil
}

func (m *SyncStateResp) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type SyncStartRequest struct {
	Id          uint32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PayloadType SyncType `protobuf:"varint,2,opt,name=payloadType,enum=protos.SyncType" json:"payloadType,omitempty"`
	Payload     []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *SyncStartRequest) Reset()                    { *m = SyncStartRequest{} }
func (m *SyncStartRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncStartRequest) ProtoMessage()               {}
func (*SyncStartRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{12} }

func (m *SyncStartRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SyncStartRequest) GetPayloadType() SyncType {
	if m != nil {
		return m.PayloadType
	}
	return SyncType_UNDEFINED
}

func (m *SyncStartRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type SyncStartResponse struct {
	Id             uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RejectedReason string `protobuf:"bytes,2,opt,name=rejectedReason" json:"rejectedReason,omitempty"`
	Statehash      []byte `protobuf:"bytes,4,opt,name=statehash,proto3" json:"statehash,omitempty"`
	BlockHeight    uint64 `protobuf:"varint,5,opt,name=blockHeight" json:"blockHeight,omitempty"`
}

func (m *SyncStartResponse) Reset()                    { *m = SyncStartResponse{} }
func (m *SyncStartResponse) String() string            { return proto.CompactTextString(m) }
func (*SyncStartResponse) ProtoMessage()               {}
func (*SyncStartResponse) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{13} }

func (m *SyncStartResponse) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SyncStartResponse) GetRejectedReason() string {
	if m != nil {
		return m.RejectedReason
	}
	return ""
}

func (m *SyncStartResponse) GetStatehash() []byte {
	if m != nil {
		return m.Statehash
	}
	return nil
}

func (m *SyncStartResponse) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type UpdatedValue struct {
	ValueWrap     *UpdatedValue_VSlice `protobuf:"bytes,1,opt,name=valueWrap" json:"valueWrap,omitempty"`
	PreviousValue []byte               `protobuf:"bytes,2,opt,name=previousValue,proto3" json:"previousValue,omitempty"`
}

func (m *UpdatedValue) Reset()                    { *m = UpdatedValue{} }
func (m *UpdatedValue) String() string            { return proto.CompactTextString(m) }
func (*UpdatedValue) ProtoMessage()               {}
func (*UpdatedValue) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{14} }

func (m *UpdatedValue) GetValueWrap() *UpdatedValue_VSlice {
	if m != nil {
		return m.ValueWrap
	}
	return nil
}

func (m *UpdatedValue) GetPreviousValue() []byte {
	if m != nil {
		return m.PreviousValue
	}
	return nil
}

type UpdatedValue_VSlice struct {
	Value []byte `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *UpdatedValue_VSlice) Reset()                    { *m = UpdatedValue_VSlice{} }
func (m *UpdatedValue_VSlice) String() string            { return proto.CompactTextString(m) }
func (*UpdatedValue_VSlice) ProtoMessage()               {}
func (*UpdatedValue_VSlice) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{14, 0} }

func (m *UpdatedValue_VSlice) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type ChaincodeStateDelta struct {
	UpdatedKVs map[string]*UpdatedValue `protobuf:"bytes,1,rep,name=UpdatedKVs" json:"UpdatedKVs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ChaincodeStateDelta) Reset()                    { *m = ChaincodeStateDelta{} }
func (m *ChaincodeStateDelta) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeStateDelta) ProtoMessage()               {}
func (*ChaincodeStateDelta) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{15} }

func (m *ChaincodeStateDelta) GetUpdatedKVs() map[string]*UpdatedValue {
	if m != nil {
		return m.UpdatedKVs
	}
	return nil
}

type SyncStateChunk struct {
	Offset *SyncOffset `protobuf:"bytes,1,opt,name=offset" json:"offset,omitempty"`
	//    bytes roothash = 2;
	MetaData             []byte                          `protobuf:"bytes,4,opt,name=metaData,proto3" json:"metaData,omitempty"`
	ChaincodeStateDeltas map[string]*ChaincodeStateDelta `protobuf:"bytes,3,rep,name=ChaincodeStateDeltas" json:"ChaincodeStateDeltas,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SyncStateChunk) Reset()                    { *m = SyncStateChunk{} }
func (m *SyncStateChunk) String() string            { return proto.CompactTextString(m) }
func (*SyncStateChunk) ProtoMessage()               {}
func (*SyncStateChunk) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{16} }

func (m *SyncStateChunk) GetOffset() *SyncOffset {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *SyncStateChunk) GetMetaData() []byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *SyncStateChunk) GetChaincodeStateDeltas() map[string]*ChaincodeStateDelta {
	if m != nil {
		return m.ChaincodeStateDeltas
	}
	return nil
}

type SyncMessage struct {
	PayloadType   SyncType    `protobuf:"varint,1,opt,name=payloadType,enum=protos.SyncType" json:"payloadType,omitempty"`
	Payload       []byte      `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Offset        *SyncOffset `protobuf:"bytes,3,opt,name=offset" json:"offset,omitempty"`
	CorrelationId uint64      `protobuf:"varint,4,opt,name=correlationId" json:"correlationId,omitempty"`
	FailedReason  string      `protobuf:"bytes,5,opt,name=failedReason" json:"failedReason,omitempty"`
}

func (m *SyncMessage) Reset()                    { *m = SyncMessage{} }
func (m *SyncMessage) String() string            { return proto.CompactTextString(m) }
func (*SyncMessage) ProtoMessage()               {}
func (*SyncMessage) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{17} }

func (m *SyncMessage) GetPayloadType() SyncType {
	if m != nil {
		return m.PayloadType
	}
	return SyncType_UNDEFINED
}

func (m *SyncMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SyncMessage) GetOffset() *SyncOffset {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *SyncMessage) GetCorrelationId() uint64 {
	if m != nil {
		return m.CorrelationId
	}
	return 0
}

func (m *SyncMessage) GetFailedReason() string {
	if m != nil {
		return m.FailedReason
	}
	return ""
}

type SyncState struct {
	Statehash []byte      `protobuf:"bytes,1,opt,name=statehash,proto3" json:"statehash,omitempty"`
	Offset    *SyncOffset `protobuf:"bytes,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *SyncState) Reset()                    { *m = SyncState{} }
func (m *SyncState) String() string            { return proto.CompactTextString(m) }
func (*SyncState) ProtoMessage()               {}
func (*SyncState) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{18} }

func (m *SyncState) GetStatehash() []byte {
	if m != nil {
		return m.Statehash
	}
	return nil
}

func (m *SyncState) GetOffset() *SyncOffset {
	if m != nil {
		return m.Offset
	}
	return nil
}

type SyncOffset struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SyncOffset) Reset()                    { *m = SyncOffset{} }
func (m *SyncOffset) String() string            { return proto.CompactTextString(m) }
func (*SyncOffset) ProtoMessage()               {}
func (*SyncOffset) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{19} }

func (m *SyncOffset) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type BucketTreeOffset struct {
	Level     uint64 `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	BucketNum uint64 `protobuf:"varint,2,opt,name=bucketNum" json:"bucketNum,omitempty"`
	Delta     uint64 `protobuf:"varint,3,opt,name=delta" json:"delta,omitempty"`
}

func (m *BucketTreeOffset) Reset()                    { *m = BucketTreeOffset{} }
func (m *BucketTreeOffset) String() string            { return proto.CompactTextString(m) }
func (*BucketTreeOffset) ProtoMessage()               {}
func (*BucketTreeOffset) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{20} }

func (m *BucketTreeOffset) GetLevel() uint64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *BucketTreeOffset) GetBucketNum() uint64 {
	if m != nil {
		return m.BucketNum
	}
	return 0
}

func (m *BucketTreeOffset) GetDelta() uint64 {
	if m != nil {
		return m.Delta
	}
	return 0
}

type BlockOffset struct {
	StartNum uint64 `protobuf:"varint,1,opt,name=startNum" json:"startNum,omitempty"`
	EndNum   uint64 `protobuf:"varint,2,opt,name=endNum" json:"endNum,omitempty"`
}

func (m *BlockOffset) Reset()                    { *m = BlockOffset{} }
func (m *BlockOffset) String() string            { return proto.CompactTextString(m) }
func (*BlockOffset) ProtoMessage()               {}
func (*BlockOffset) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{21} }

func (m *BlockOffset) GetStartNum() uint64 {
	if m != nil {
		return m.StartNum
	}
	return 0
}

func (m *BlockOffset) GetEndNum() uint64 {
	if m != nil {
		return m.EndNum
	}
	return 0
}

func init() {
	proto.RegisterType((*GlobalState)(nil), "protos.GlobalState")
	proto.RegisterType((*BlockState)(nil), "protos.BlockState")
	proto.RegisterType((*SyncBlockRange)(nil), "protos.SyncBlockRange")
	proto.RegisterType((*SyncBlocks)(nil), "protos.SyncBlocks")
	proto.RegisterType((*SyncStateSnapshotRequest)(nil), "protos.SyncStateSnapshotRequest")
	proto.RegisterType((*SyncStateSnapshot)(nil), "protos.SyncStateSnapshot")
	proto.RegisterType((*SyncStateDeltasRequest)(nil), "protos.SyncStateDeltasRequest")
	proto.RegisterType((*SyncStateDeltas)(nil), "protos.SyncStateDeltas")
	proto.RegisterType((*SyncBlockState)(nil), "protos.SyncBlockState")
	proto.RegisterType((*SyncMsg)(nil), "protos.SyncMsg")
	proto.RegisterType((*SyncStateQuery)(nil), "protos.SyncStateQuery")
	proto.RegisterType((*SyncStateResp)(nil), "protos.SyncStateResp")
	proto.RegisterType((*SyncStartRequest)(nil), "protos.SyncStartRequest")
	proto.RegisterType((*SyncStartResponse)(nil), "protos.SyncStartResponse")
	proto.RegisterType((*UpdatedValue)(nil), "protos.UpdatedValue")
	proto.RegisterType((*UpdatedValue_VSlice)(nil), "protos.UpdatedValue.VSlice")
	proto.RegisterType((*ChaincodeStateDelta)(nil), "protos.ChaincodeStateDelta")
	proto.RegisterType((*SyncStateChunk)(nil), "protos.SyncStateChunk")
	proto.RegisterType((*SyncMessage)(nil), "protos.SyncMessage")
	proto.RegisterType((*SyncState)(nil), "protos.SyncState")
	proto.RegisterType((*SyncOffset)(nil), "protos.SyncOffset")
	proto.RegisterType((*BucketTreeOffset)(nil), "protos.BucketTreeOffset")
	proto.RegisterType((*BlockOffset)(nil), "protos.BlockOffset")
	proto.RegisterEnum("protos.SyncType", SyncType_name, SyncType_value)
	proto.RegisterEnum("protos.SyncMsg_Type", SyncMsg_Type_name, SyncMsg_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Sync service

type SyncClient interface {
	// response for the controlling channel: state searching and info
	Control(ctx context.Context, opts ...grpc.CallOption) (Sync_ControlClient, error)
	Data(ctx context.Context, opts ...grpc.CallOption) (Sync_DataClient, error)
}

type syncClient struct {
	cc *grpc.ClientConn
}

func NewSyncClient(cc *grpc.ClientConn) SyncClient {
	return &syncClient{cc}
}

func (c *syncClient) Control(ctx context.Context, opts ...grpc.CallOption) (Sync_ControlClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Sync_serviceDesc.Streams[0], c.cc, "/protos.Sync/Control", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncControlClient{stream}
	return x, nil
}

type Sync_ControlClient interface {
	Send(*SyncMsg) error
	Recv() (*SyncMsg, error)
	grpc.ClientStream
}

type syncControlClient struct {
	grpc.ClientStream
}

func (x *syncControlClient) Send(m *SyncMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *syncControlClient) Recv() (*SyncMsg, error) {
	m := new(SyncMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *syncClient) Data(ctx context.Context, opts ...grpc.CallOption) (Sync_DataClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Sync_serviceDesc.Streams[1], c.cc, "/protos.Sync/Data", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncDataClient{stream}
	return x, nil
}

type Sync_DataClient interface {
	Send(*SyncMsg) error
	Recv() (*SyncMsg, error)
	grpc.ClientStream
}

type syncDataClient struct {
	grpc.ClientStream
}

func (x *syncDataClient) Send(m *SyncMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *syncDataClient) Recv() (*SyncMsg, error) {
	m := new(SyncMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Sync service

type SyncServer interface {
	// response for the controlling channel: state searching and info
	Control(Sync_ControlServer) error
	Data(Sync_DataServer) error
}

func RegisterSyncServer(s *grpc.Server, srv SyncServer) {
	s.RegisterService(&_Sync_serviceDesc, srv)
}

func _Sync_Control_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SyncServer).Control(&syncControlServer{stream})
}

type Sync_ControlServer interface {
	Send(*SyncMsg) error
	Recv() (*SyncMsg, error)
	grpc.ServerStream
}

type syncControlServer struct {
	grpc.ServerStream
}

func (x *syncControlServer) Send(m *SyncMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *syncControlServer) Recv() (*SyncMsg, error) {
	m := new(SyncMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Sync_Data_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SyncServer).Data(&syncDataServer{stream})
}

type Sync_DataServer interface {
	Send(*SyncMsg) error
	Recv() (*SyncMsg, error)
	grpc.ServerStream
}

type syncDataServer struct {
	grpc.ServerStream
}

func (x *syncDataServer) Send(m *SyncMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *syncDataServer) Recv() (*SyncMsg, error) {
	m := new(SyncMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Sync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Sync",
	HandlerType: (*SyncServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Control",
			Handler:       _Sync_Control_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Data",
			Handler:       _Sync_Data_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sync.proto",
}

func init() { proto.RegisterFile("sync.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 1223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0x0e, 0xa9, 0x87, 0xed, 0x91, 0xac, 0xd0, 0x6b, 0xd7, 0x51, 0x94, 0x26, 0x50, 0xd9, 0x07,
	0x8c, 0x34, 0x10, 0x12, 0xf7, 0x92, 0xe6, 0x54, 0x3f, 0x94, 0xc4, 0x70, 0x22, 0x37, 0x4b, 0x39,
	0x41, 0x80, 0xa2, 0xc1, 0x5a, 0x5c, 0x5b, 0xac, 0x69, 0x92, 0xe5, 0x52, 0x46, 0xf5, 0x1b, 0x7a,
	0xe8, 0x8f, 0x68, 0x8f, 0x3d, 0xb7, 0xbf, 0xa3, 0xbf, 0xa6, 0xd7, 0x62, 0x67, 0x57, 0x14, 0x1f,
	0x72, 0x12, 0xa3, 0x27, 0x71, 0x66, 0xe7, 0xb1, 0xf3, 0xcd, 0x6b, 0x05, 0x20, 0xa6, 0xc1, 0xa8,
	0x17, 0xc5, 0x61, 0x12, 0x92, 0x3a, 0xfe, 0x88, 0x4e, 0xf3, 0x94, 0x9d, 0xc4, 0x9e, 0xe6, 0xda,
	0xff, 0x1a, 0xd0, 0x78, 0xe6, 0x87, 0x27, 0xcc, 0x77, 0x12, 0x96, 0x70, 0xb2, 0x01, 0xb5, 0x51,
	0x38, 0x09, 0x92, 0xb6, 0xd1, 0x35, 0xb6, 0xaa, 0x54, 0x11, 0xe4, 0x01, 0xac, 0x05, 0xfc, 0x97,
	0x64, 0x10, 0xba, 0x1c, 0xc5, 0x9e, 0x33, 0x31, 0x6e, 0x57, 0xba, 0x95, 0xad, 0x26, 0x2d, 0x1f,
	0x90, 0x87, 0xb0, 0x1e, 0xb1, 0x98, 0x07, 0x05, 0xf9, 0x2a, 0xca, 0x2f, 0x3a, 0x22, 0x8f, 0xe1,
	0x96, 0xcf, 0x44, 0xb2, 0x1b, 0xb3, 0x60, 0x34, 0xce, 0x6b, 0xd5, 0xba, 0xc6, 0x56, 0x93, 0x5e,
	0x75, 0x2c, 0x35, 0xe5, 0x05, 0x16, 0x69, 0x2e, 0x29, 0xcd, 0x2b, 0x8e, 0x6d, 0x0f, 0x60, 0xd7,
	0x0f, 0x47, 0xe7, 0x2a, 0xee, 0xcf, 0xa1, 0x76, 0x22, 0x29, 0x8c, 0xbb, 0xb1, 0xbd, 0xaa, 0xe0,
	0x11, 0x3d, 0x14, 0xa1, 0xea, 0x8c, 0xdc, 0x03, 0x10, 0x52, 0x7a, 0x9f, 0xfb, 0x09, 0x6b, 0x9b,
	0x68, 0x3f, 0xc3, 0x21, 0x9b, 0x50, 0x7f, 0xce, 0xbd, 0xb3, 0x71, 0xd2, 0xae, 0x20, 0x7a, 0x9a,
	0xb2, 0x7f, 0x84, 0x96, 0x33, 0x0d, 0x46, 0xca, 0x16, 0x0b, 0xce, 0x38, 0xf9, 0x02, 0x56, 0x47,
	0x61, 0x1c, 0x73, 0x9f, 0x25, 0x5e, 0x18, 0x1c, 0xb8, 0x1a, 0xee, 0x3c, 0x53, 0x26, 0x43, 0x24,
	0x2c, 0x4e, 0xd0, 0x55, 0x95, 0x2a, 0x82, 0x58, 0x50, 0xe1, 0x81, 0xab, 0x5d, 0xc8, 0x4f, 0x9b,
	0x01, 0xa4, 0xf6, 0x05, 0x79, 0x00, 0xb5, 0x58, 0x3a, 0xd1, 0xa1, 0x6c, 0xce, 0x42, 0xc9, 0x5f,
	0x81, 0x2a, 0x21, 0xf2, 0x25, 0xd4, 0x31, 0x38, 0xd1, 0x36, 0xbb, 0x95, 0x72, 0xe4, 0xfa, 0xd0,
	0xfe, 0x0e, 0xda, 0x52, 0x1f, 0xc1, 0x72, 0x02, 0x16, 0x89, 0x71, 0x98, 0x50, 0xfe, 0xf3, 0x84,
	0x8b, 0xe4, 0xe3, 0x82, 0xb1, 0x7f, 0x37, 0x60, 0xad, 0x64, 0x42, 0x86, 0xe8, 0x22, 0x9a, 0x06,
	0xa2, 0xa9, 0x08, 0xd2, 0x81, 0x65, 0x21, 0x8d, 0x07, 0x23, 0xae, 0x63, 0x4f, 0x69, 0xd2, 0x85,
	0x06, 0xde, 0x69, 0x30, 0xb9, 0x38, 0xe1, 0xb1, 0x86, 0x21, 0xcb, 0x22, 0x4f, 0x60, 0x29, 0x56,
	0x57, 0x6b, 0x57, 0x11, 0x82, 0x6e, 0x16, 0x82, 0x45, 0x21, 0xd0, 0x99, 0x82, 0xfd, 0x14, 0x36,
	0x53, 0x21, 0x4c, 0xaa, 0x98, 0x45, 0x79, 0x2d, 0x58, 0xed, 0x37, 0x70, 0xb3, 0x60, 0xe7, 0x9a,
	0x79, 0xd9, 0x84, 0x3a, 0x62, 0xa1, 0xf2, 0xd2, 0xa4, 0x9a, 0xb2, 0x83, 0x4c, 0x2d, 0xa9, 0xd2,
	0xbd, 0x9e, 0xdd, 0x1e, 0x2c, 0xcb, 0xa1, 0xe0, 0x32, 0xac, 0x60, 0x99, 0x71, 0x92, 0xcb, 0x38,
	0xda, 0xa4, 0xa9, 0x8c, 0xfd, 0x67, 0x05, 0x96, 0xa4, 0xa5, 0x97, 0xe2, 0x8c, 0x6c, 0x41, 0x35,
	0x99, 0x46, 0xca, 0x51, 0x6b, 0x7b, 0x23, 0xeb, 0xe8, 0xa5, 0x38, 0xeb, 0x0d, 0xa7, 0x11, 0xa7,
	0x28, 0x51, 0x2e, 0x09, 0x73, 0x51, 0x7d, 0xb7, 0x61, 0x29, 0x62, 0x53, 0x3f, 0x64, 0xaa, 0x9a,
	0x9b, 0x74, 0x46, 0xda, 0x7f, 0x99, 0x50, 0x95, 0xe6, 0xc8, 0x2a, 0xac, 0x1c, 0x0f, 0xf6, 0xfb,
	0x4f, 0x0f, 0x06, 0xfd, 0x7d, 0xeb, 0x06, 0xf9, 0x04, 0xd6, 0x9c, 0xb7, 0x83, 0xbd, 0x77, 0xce,
	0x70, 0x67, 0xd8, 0x7f, 0x37, 0x38, 0x1a, 0x1e, 0x3c, 0x7d, 0x6b, 0x19, 0x84, 0x40, 0x2b, 0xc3,
	0x3e, 0xfa, 0x7e, 0x68, 0x99, 0x64, 0x13, 0x88, 0xe2, 0xf5, 0x1d, 0xe7, 0xe0, 0x68, 0x20, 0xcf,
	0xe8, 0xd0, 0xaa, 0x90, 0x0e, 0x6c, 0x96, 0xf9, 0xef, 0x76, 0xf6, 0x0e, 0xad, 0x6a, 0x49, 0xe7,
	0xd5, 0x71, 0x9f, 0xbe, 0xb5, 0x6a, 0x25, 0x1d, 0xe4, 0xa3, 0x4e, 0x9d, 0x6c, 0x80, 0x95, 0x3b,
	0xeb, 0x0f, 0xf6, 0xad, 0x65, 0x72, 0x0b, 0xd6, 0x73, 0xdc, 0xfd, 0xfe, 0x8b, 0xe1, 0x8e, 0x63,
	0x59, 0xe4, 0x0e, 0xdc, 0x5a, 0x70, 0x80, 0xb6, 0xd6, 0xc8, 0x5d, 0xb8, 0x9d, 0xbf, 0x9b, 0x24,
	0x5e, 0xf6, 0x1d, 0x67, 0xe7, 0x59, 0xdf, 0x22, 0xe4, 0x33, 0xb8, 0x7b, 0xe5, 0x31, 0x5a, 0x58,
	0xb7, 0x77, 0x55, 0x79, 0x60, 0x16, 0x5f, 0x4d, 0x78, 0x3c, 0x25, 0x2d, 0x30, 0x3d, 0xd5, 0x92,
	0xab, 0xd4, 0xf4, 0xdc, 0xb4, 0x7f, 0xf4, 0xa4, 0x32, 0x33, 0xfd, 0xa3, 0xc7, 0xd5, 0x14, 0x56,
	0x53, 0x1b, 0x94, 0x8b, 0xa8, 0x64, 0x42, 0xe6, 0x2d, 0x14, 0x89, 0x77, 0xc9, 0x31, 0x6f, 0xcb,
	0x74, 0x46, 0x92, 0x4f, 0x61, 0x05, 0xe7, 0xe1, 0x58, 0x0d, 0x7c, 0x99, 0xd3, 0x39, 0xa3, 0xe8,
	0xba, 0x56, 0x76, 0x1d, 0x81, 0xa5, 0x5d, 0xc7, 0xe9, 0x78, 0x29, 0x7a, 0xdf, 0x86, 0x86, 0x2e,
	0x13, 0x59, 0x21, 0x18, 0x40, 0x6b, 0xdb, 0xca, 0x16, 0x23, 0x16, 0x62, 0x56, 0xe8, 0x3d, 0x95,
	0xf6, 0xeb, 0x7c, 0x2c, 0x49, 0x97, 0x22, 0x0a, 0x03, 0xc1, 0x4b, 0x3e, 0xbf, 0x82, 0x56, 0xcc,
	0x7f, 0xe2, 0xa3, 0x84, 0xbb, 0x94, 0x33, 0x11, 0x06, 0xe8, 0x76, 0x85, 0x16, 0xb8, 0xff, 0x3b,
	0xfe, 0xdf, 0x0c, 0x68, 0x1e, 0x47, 0x2e, 0x4b, 0xb8, 0xfb, 0x9a, 0xf9, 0x13, 0x4e, 0xbe, 0x85,
	0x95, 0x4b, 0xf9, 0xf1, 0x26, 0x66, 0x91, 0x6e, 0xf0, 0x3b, 0xb3, 0x50, 0xb3, 0x82, 0xbd, 0xd7,
	0x8e, 0xef, 0x8d, 0x38, 0x9d, 0x4b, 0xcb, 0x1e, 0x8c, 0x62, 0x7e, 0xe9, 0x85, 0x13, 0x81, 0x22,
	0x7a, 0x61, 0xe5, 0x99, 0x9d, 0x7b, 0x50, 0x57, 0xaa, 0x72, 0x14, 0x2b, 0x39, 0x3d, 0x8a, 0x91,
	0xb0, 0xff, 0x36, 0x60, 0x7d, 0x6f, 0xcc, 0xbc, 0x60, 0x34, 0xdb, 0x9e, 0x6a, 0xd7, 0x1d, 0x02,
	0x68, 0xff, 0x87, 0xaf, 0x45, 0xdb, 0xc0, 0x49, 0xf2, 0xf5, 0xec, 0x66, 0x0b, 0x14, 0x7a, 0x73,
	0xe9, 0x7e, 0x90, 0xc4, 0x53, 0x9a, 0x51, 0xef, 0x38, 0x70, 0xb3, 0x70, 0x2c, 0xb7, 0xdc, 0x39,
	0x9f, 0xe2, 0x5d, 0x56, 0xa8, 0xfc, 0x24, 0xf7, 0xa1, 0x76, 0x99, 0xc6, 0xd1, 0x98, 0x8f, 0x9f,
	0x2c, 0x0c, 0x54, 0x89, 0x3c, 0x31, 0x1f, 0x1b, 0xf6, 0x1f, 0x66, 0xa6, 0x17, 0xf6, 0xc6, 0x93,
	0xe0, 0x9c, 0xdc, 0x87, 0x7a, 0x78, 0x7a, 0x2a, 0x78, 0xa2, 0xa1, 0x24, 0xd9, 0xaa, 0x39, 0xc2,
	0x13, 0xaa, 0x25, 0xe4, 0x0e, 0xba, 0xe0, 0x09, 0xdb, 0x97, 0x83, 0x52, 0x65, 0x32, 0xa5, 0x89,
	0x0b, 0x1b, 0x0b, 0x42, 0x14, 0xf8, 0x24, 0x6a, 0x6c, 0x3f, 0x2c, 0xad, 0x1b, 0xf4, 0xbe, 0x08,
	0x15, 0x8d, 0xc5, 0x42, 0x6b, 0x1d, 0x17, 0x6e, 0x5f, 0xa9, 0xb2, 0x00, 0x9f, 0x47, 0x79, 0x7c,
	0xee, 0xbc, 0x27, 0x19, 0x59, 0x98, 0xfe, 0x31, 0xa0, 0x81, 0x13, 0x9c, 0x0b, 0xc1, 0xce, 0x78,
	0xb1, 0xbd, 0x8c, 0x6b, 0xb6, 0x97, 0x99, 0x6b, 0xaf, 0x0c, 0xe2, 0x95, 0x0f, 0x22, 0x5e, 0x5a,
	0x1a, 0xd5, 0x45, 0x4b, 0xc3, 0x86, 0xe6, 0x29, 0xf3, 0xfc, 0xb4, 0x11, 0x6b, 0x88, 0x40, 0x8e,
	0x67, 0x1f, 0xc3, 0x4a, 0x8a, 0x7d, 0xbe, 0x27, 0x8d, 0x62, 0x4f, 0xce, 0x2f, 0x68, 0x7e, 0xe8,
	0x82, 0x76, 0x57, 0xbd, 0xb3, 0x14, 0x97, 0x10, 0xa8, 0xe2, 0x16, 0x55, 0x26, 0xf1, 0xdb, 0xfe,
	0x01, 0xac, 0xdd, 0xc9, 0xe8, 0x9c, 0x27, 0xc3, 0x98, 0x73, 0x2d, 0xb7, 0x01, 0x35, 0x9f, 0x5f,
	0x72, 0x7f, 0xf6, 0xa4, 0x46, 0x42, 0xde, 0xea, 0x04, 0x25, 0x07, 0x93, 0x0b, 0x3d, 0x84, 0xe7,
	0x8c, 0xf9, 0xb3, 0x48, 0x3d, 0x6f, 0x14, 0x61, 0xef, 0x40, 0x03, 0x77, 0xf4, 0x51, 0x5a, 0xa1,
	0xf8, 0x22, 0x94, 0x16, 0x0c, 0xfd, 0x4a, 0xd2, 0xb4, 0x7c, 0x3e, 0xf0, 0xc0, 0x9d, 0xdb, 0xd6,
	0xd4, 0x7d, 0x06, 0xcb, 0xb3, 0x14, 0x16, 0x77, 0x6b, 0x0b, 0x00, 0x17, 0xca, 0xee, 0x8b, 0xa3,
	0xbd, 0xc3, 0xcc, 0x52, 0x45, 0x1a, 0xd7, 0x8b, 0x99, 0xca, 0xe0, 0xa2, 0xb5, 0x2a, 0x85, 0xc5,
	0x8b, 0x4b, 0x74, 0xdb, 0x83, 0xaa, 0x74, 0x41, 0x1e, 0xc1, 0xd2, 0x5e, 0x18, 0x24, 0x71, 0xe8,
	0x93, 0x9b, 0x85, 0xa7, 0x42, 0xa7, 0xc8, 0xb0, 0x6f, 0x6c, 0x19, 0x0f, 0x0d, 0xd2, 0x83, 0x2a,
	0xf6, 0xd7, 0x47, 0xca, 0x9f, 0xa8, 0xff, 0x34, 0xdf, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xb1,
	0x86, 0x9b, 0xae, 0xe8, 0x0c, 0x00, 0x00,
}
