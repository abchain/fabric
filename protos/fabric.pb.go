// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fabric.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Transaction_Type int32

const (
	Transaction_UNDEFINED Transaction_Type = 0
	// deploy a chaincode to the network and call `Init` function
	Transaction_CHAINCODE_DEPLOY Transaction_Type = 1
	// call a chaincode `Invoke` function as a transaction
	Transaction_CHAINCODE_INVOKE Transaction_Type = 2
	// call a chaincode `query` function
	Transaction_CHAINCODE_QUERY Transaction_Type = 3
	// terminate a chaincode; not implemented yet
	Transaction_CHAINCODE_TERMINATE Transaction_Type = 4
)

var Transaction_Type_name = map[int32]string{
	0: "UNDEFINED",
	1: "CHAINCODE_DEPLOY",
	2: "CHAINCODE_INVOKE",
	3: "CHAINCODE_QUERY",
	4: "CHAINCODE_TERMINATE",
}
var Transaction_Type_value = map[string]int32{
	"UNDEFINED":           0,
	"CHAINCODE_DEPLOY":    1,
	"CHAINCODE_INVOKE":    2,
	"CHAINCODE_QUERY":     3,
	"CHAINCODE_TERMINATE": 4,
}

func (x Transaction_Type) String() string {
	return proto.EnumName(Transaction_Type_name, int32(x))
}
func (Transaction_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{2, 0} }

type PeerEndpoint_Type int32

const (
	PeerEndpoint_UNDEFINED     PeerEndpoint_Type = 0
	PeerEndpoint_VALIDATOR     PeerEndpoint_Type = 1
	PeerEndpoint_NON_VALIDATOR PeerEndpoint_Type = 2
)

var PeerEndpoint_Type_name = map[int32]string{
	0: "UNDEFINED",
	1: "VALIDATOR",
	2: "NON_VALIDATOR",
}
var PeerEndpoint_Type_value = map[string]int32{
	"UNDEFINED":     0,
	"VALIDATOR":     1,
	"NON_VALIDATOR": 2,
}

func (x PeerEndpoint_Type) String() string {
	return proto.EnumName(PeerEndpoint_Type_name, int32(x))
}
func (PeerEndpoint_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{10, 0} }

type Message_Type int32

const (
	Message_UNDEFINED               Message_Type = 0
	Message_DISC_HELLO              Message_Type = 1
	Message_DISC_DISCONNECT         Message_Type = 2
	Message_DISC_GET_PEERS          Message_Type = 3
	Message_DISC_PEERS              Message_Type = 4
	Message_DISC_NEWMSG             Message_Type = 5
	Message_CHAIN_TRANSACTION       Message_Type = 6
	Message_SYNC_GET_BLOCKS         Message_Type = 11
	Message_SYNC_BLOCKS             Message_Type = 12
	Message_SYNC_BLOCK_ADDED        Message_Type = 13
	Message_SYNC_STATE_GET_SNAPSHOT Message_Type = 14
	Message_SYNC_STATE_SNAPSHOT     Message_Type = 15
	Message_SYNC_STATE_GET_DELTAS   Message_Type = 16
	Message_SYNC_STATE_DELTAS       Message_Type = 17
	Message_RESPONSE                Message_Type = 20
	Message_CONSENSUS               Message_Type = 21
)

var Message_Type_name = map[int32]string{
	0:  "UNDEFINED",
	1:  "DISC_HELLO",
	2:  "DISC_DISCONNECT",
	3:  "DISC_GET_PEERS",
	4:  "DISC_PEERS",
	5:  "DISC_NEWMSG",
	6:  "CHAIN_TRANSACTION",
	11: "SYNC_GET_BLOCKS",
	12: "SYNC_BLOCKS",
	13: "SYNC_BLOCK_ADDED",
	14: "SYNC_STATE_GET_SNAPSHOT",
	15: "SYNC_STATE_SNAPSHOT",
	16: "SYNC_STATE_GET_DELTAS",
	17: "SYNC_STATE_DELTAS",
	20: "RESPONSE",
	21: "CONSENSUS",
}
var Message_Type_value = map[string]int32{
	"UNDEFINED":               0,
	"DISC_HELLO":              1,
	"DISC_DISCONNECT":         2,
	"DISC_GET_PEERS":          3,
	"DISC_PEERS":              4,
	"DISC_NEWMSG":             5,
	"CHAIN_TRANSACTION":       6,
	"SYNC_GET_BLOCKS":         11,
	"SYNC_BLOCKS":             12,
	"SYNC_BLOCK_ADDED":        13,
	"SYNC_STATE_GET_SNAPSHOT": 14,
	"SYNC_STATE_SNAPSHOT":     15,
	"SYNC_STATE_GET_DELTAS":   16,
	"SYNC_STATE_DELTAS":       17,
	"RESPONSE":                20,
	"CONSENSUS":               21,
}

func (x Message_Type) String() string {
	return proto.EnumName(Message_Type_name, int32(x))
}
func (Message_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{14, 0} }

type Response_StatusCode int32

const (
	Response_UNDEFINED Response_StatusCode = 0
	Response_SUCCESS   Response_StatusCode = 200
	Response_FAILURE   Response_StatusCode = 500
)

var Response_StatusCode_name = map[int32]string{
	0:   "UNDEFINED",
	200: "SUCCESS",
	500: "FAILURE",
}
var Response_StatusCode_value = map[string]int32{
	"UNDEFINED": 0,
	"SUCCESS":   200,
	"FAILURE":   500,
}

func (x Response_StatusCode) String() string {
	return proto.EnumName(Response_StatusCode_name, int32(x))
}
func (Response_StatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{15, 0} }

// Globalstate defines the global graph of all states
type GlobalState struct {
	Count                   uint64   `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	NextNodeStateHash       [][]byte `protobuf:"bytes,3,rep,name=nextNodeStateHash,proto3" json:"nextNodeStateHash,omitempty"`
	ParentNodeStateHash     [][]byte `protobuf:"bytes,4,rep,name=parentNodeStateHash,proto3" json:"parentNodeStateHash,omitempty"`
	LastBranchNodeStateHash []byte   `protobuf:"bytes,5,opt,name=lastBranchNodeStateHash,proto3" json:"lastBranchNodeStateHash,omitempty"`
	NextBranchNodeStateHash []byte   `protobuf:"bytes,7,opt,name=nextBranchNodeStateHash,proto3" json:"nextBranchNodeStateHash,omitempty"`
}

func (m *GlobalState) Reset()                    { *m = GlobalState{} }
func (m *GlobalState) String() string            { return proto.CompactTextString(m) }
func (*GlobalState) ProtoMessage()               {}
func (*GlobalState) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *GlobalState) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GlobalState) GetNextNodeStateHash() [][]byte {
	if m != nil {
		return m.NextNodeStateHash
	}
	return nil
}

func (m *GlobalState) GetParentNodeStateHash() [][]byte {
	if m != nil {
		return m.ParentNodeStateHash
	}
	return nil
}

func (m *GlobalState) GetLastBranchNodeStateHash() []byte {
	if m != nil {
		return m.LastBranchNodeStateHash
	}
	return nil
}

func (m *GlobalState) GetNextBranchNodeStateHash() []byte {
	if m != nil {
		return m.NextBranchNodeStateHash
	}
	return nil
}

type GlobalStateUpdateTask struct {
	Target        []byte `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	TargetEdgeBeg []byte `protobuf:"bytes,2,opt,name=targetEdgeBeg,proto3" json:"targetEdgeBeg,omitempty"`
	TargetEdgeEnd []byte `protobuf:"bytes,3,opt,name=targetEdgeEnd,proto3" json:"targetEdgeEnd,omitempty"`
	TargetId      uint64 `protobuf:"varint,4,opt,name=targetId" json:"targetId,omitempty"`
	IsBackward    bool   `protobuf:"varint,6,opt,name=isBackward" json:"isBackward,omitempty"`
}

func (m *GlobalStateUpdateTask) Reset()                    { *m = GlobalStateUpdateTask{} }
func (m *GlobalStateUpdateTask) String() string            { return proto.CompactTextString(m) }
func (*GlobalStateUpdateTask) ProtoMessage()               {}
func (*GlobalStateUpdateTask) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *GlobalStateUpdateTask) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *GlobalStateUpdateTask) GetTargetEdgeBeg() []byte {
	if m != nil {
		return m.TargetEdgeBeg
	}
	return nil
}

func (m *GlobalStateUpdateTask) GetTargetEdgeEnd() []byte {
	if m != nil {
		return m.TargetEdgeEnd
	}
	return nil
}

func (m *GlobalStateUpdateTask) GetTargetId() uint64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *GlobalStateUpdateTask) GetIsBackward() bool {
	if m != nil {
		return m.IsBackward
	}
	return false
}

// Transaction defines a function call to a contract.
// `args` is an array of type string so that the chaincode writer can choose
// whatever format they wish for the arguments for their chaincode.
// For example, they may wish to use JSON, XML, or a custom format.
// TODO: Defined remaining fields.
type Transaction struct {
	Type Transaction_Type `protobuf:"varint,1,opt,name=type,enum=protos.Transaction_Type" json:"type,omitempty"`
	// store ChaincodeID as bytes so its encrypted value can be stored
	ChaincodeID                    []byte                     `protobuf:"bytes,2,opt,name=chaincodeID,proto3" json:"chaincodeID,omitempty"`
	Payload                        []byte                     `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Metadata                       []byte                     `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Txid                           string                     `protobuf:"bytes,5,opt,name=txid" json:"txid,omitempty"`
	Timestamp                      *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=timestamp" json:"timestamp,omitempty"`
	ConfidentialityLevel           ConfidentialityLevel       `protobuf:"varint,7,opt,name=confidentialityLevel,enum=protos.ConfidentialityLevel" json:"confidentialityLevel,omitempty"`
	ConfidentialityProtocolVersion string                     `protobuf:"bytes,8,opt,name=confidentialityProtocolVersion" json:"confidentialityProtocolVersion,omitempty"`
	Nonce                          []byte                     `protobuf:"bytes,9,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ToValidators                   []byte                     `protobuf:"bytes,10,opt,name=toValidators,proto3" json:"toValidators,omitempty"`
	Cert                           []byte                     `protobuf:"bytes,11,opt,name=cert,proto3" json:"cert,omitempty"`
	Signature                      []byte                     `protobuf:"bytes,12,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *Transaction) GetType() Transaction_Type {
	if m != nil {
		return m.Type
	}
	return Transaction_UNDEFINED
}

func (m *Transaction) GetChaincodeID() []byte {
	if m != nil {
		return m.ChaincodeID
	}
	return nil
}

func (m *Transaction) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Transaction) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Transaction) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *Transaction) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Transaction) GetConfidentialityLevel() ConfidentialityLevel {
	if m != nil {
		return m.ConfidentialityLevel
	}
	return ConfidentialityLevel_PUBLIC
}

func (m *Transaction) GetConfidentialityProtocolVersion() string {
	if m != nil {
		return m.ConfidentialityProtocolVersion
	}
	return ""
}

func (m *Transaction) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *Transaction) GetToValidators() []byte {
	if m != nil {
		return m.ToValidators
	}
	return nil
}

func (m *Transaction) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *Transaction) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// TransactionBlock carries a batch of transactions.
type TransactionBlock struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *TransactionBlock) Reset()                    { *m = TransactionBlock{} }
func (m *TransactionBlock) String() string            { return proto.CompactTextString(m) }
func (*TransactionBlock) ProtoMessage()               {}
func (*TransactionBlock) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *TransactionBlock) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

// TransactionResult contains the return value of a transaction. It does
// not track potential state changes that were a result of the transaction.
// txid - The unique identifier of this transaction.
// result - The return value of the transaction.
// errorCode - An error code. 5xx will be logged as a failure in the dashboard.
// error - An error string for logging an issue.
// chaincodeEvent - any event emitted by a transaction
type TransactionResult struct {
	Txid      string `protobuf:"bytes,1,opt,name=txid" json:"txid,omitempty"`
	Result    []byte `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	ErrorCode uint32 `protobuf:"varint,3,opt,name=errorCode" json:"errorCode,omitempty"`
	Error     string `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	// ChaincodeEvent chaincodeEvent = 5;
	ChaincodeEvents []*ChaincodeEvent `protobuf:"bytes,6,rep,name=chaincodeEvents" json:"chaincodeEvents,omitempty"`
}

func (m *TransactionResult) Reset()                    { *m = TransactionResult{} }
func (m *TransactionResult) String() string            { return proto.CompactTextString(m) }
func (*TransactionResult) ProtoMessage()               {}
func (*TransactionResult) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *TransactionResult) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *TransactionResult) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *TransactionResult) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *TransactionResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TransactionResult) GetChaincodeEvents() []*ChaincodeEvent {
	if m != nil {
		return m.ChaincodeEvents
	}
	return nil
}

// Block carries The data that describes a block in the blockchain.
// version - Version used to track any protocol changes.
// timestamp - The time at which the block or transaction order
// was proposed. This may not be used by all consensus modules.
// transactions - The ordered list of transactions in the block.
// stateHash - The state hash after running transactions in this block.
// previousBlockHash - The hash of the previous block in the chain.
// consensusMetadata - Consensus modules may optionally store any
// additional metadata in this field.
// nonHashData - Data stored with the block, but not included in the blocks
// hash. This allows this data to be different per peer or discarded without
// impacting the blockchain.
type Block struct {
	Version           uint32                     `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Timestamp         *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Transactions      []*Transaction             `protobuf:"bytes,3,rep,name=transactions" json:"transactions,omitempty"`
	StateHash         []byte                     `protobuf:"bytes,4,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	PreviousBlockHash []byte                     `protobuf:"bytes,5,opt,name=previousBlockHash,proto3" json:"previousBlockHash,omitempty"`
	ConsensusMetadata []byte                     `protobuf:"bytes,6,opt,name=consensusMetadata,proto3" json:"consensusMetadata,omitempty"`
	NonHashData       *NonHashData               `protobuf:"bytes,7,opt,name=nonHashData" json:"nonHashData,omitempty"`
	Txids             []string                   `protobuf:"bytes,8,rep,name=txids" json:"txids,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *Block) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Block) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Block) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *Block) GetPreviousBlockHash() []byte {
	if m != nil {
		return m.PreviousBlockHash
	}
	return nil
}

func (m *Block) GetConsensusMetadata() []byte {
	if m != nil {
		return m.ConsensusMetadata
	}
	return nil
}

func (m *Block) GetNonHashData() *NonHashData {
	if m != nil {
		return m.NonHashData
	}
	return nil
}

func (m *Block) GetTxids() []string {
	if m != nil {
		return m.Txids
	}
	return nil
}

// Contains information about the blockchain ledger such as height, current
// block hash, and previous block hash.
type BlockchainInfo struct {
	Height            uint64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	CurrentBlockHash  []byte `protobuf:"bytes,2,opt,name=currentBlockHash,proto3" json:"currentBlockHash,omitempty"`
	PreviousBlockHash []byte `protobuf:"bytes,3,opt,name=previousBlockHash,proto3" json:"previousBlockHash,omitempty"`
}

func (m *BlockchainInfo) Reset()                    { *m = BlockchainInfo{} }
func (m *BlockchainInfo) String() string            { return proto.CompactTextString(m) }
func (*BlockchainInfo) ProtoMessage()               {}
func (*BlockchainInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *BlockchainInfo) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockchainInfo) GetCurrentBlockHash() []byte {
	if m != nil {
		return m.CurrentBlockHash
	}
	return nil
}

func (m *BlockchainInfo) GetPreviousBlockHash() []byte {
	if m != nil {
		return m.PreviousBlockHash
	}
	return nil
}

// NonHashData is data that is recorded on the block, but not included in
// the block hash when verifying the blockchain.
// localLedgerCommitTimestamp - The time at which the block was added
// to the ledger on the local peer.
// chaincodeEvent - is an array ChaincodeEvents, one per transaction in the
// block
type NonHashData struct {
	LocalLedgerCommitTimestamp *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=localLedgerCommitTimestamp" json:"localLedgerCommitTimestamp,omitempty"`
	ChaincodeEvents            []*ChaincodeEvent          `protobuf:"bytes,2,rep,name=chaincodeEvents" json:"chaincodeEvents,omitempty"`
}

func (m *NonHashData) Reset()                    { *m = NonHashData{} }
func (m *NonHashData) String() string            { return proto.CompactTextString(m) }
func (*NonHashData) ProtoMessage()               {}
func (*NonHashData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *NonHashData) GetLocalLedgerCommitTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.LocalLedgerCommitTimestamp
	}
	return nil
}

func (m *NonHashData) GetChaincodeEvents() []*ChaincodeEvent {
	if m != nil {
		return m.ChaincodeEvents
	}
	return nil
}

type PeerAddress struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *PeerAddress) Reset()                    { *m = PeerAddress{} }
func (m *PeerAddress) String() string            { return proto.CompactTextString(m) }
func (*PeerAddress) ProtoMessage()               {}
func (*PeerAddress) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *PeerAddress) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *PeerAddress) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type PeerID struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *PeerID) Reset()                    { *m = PeerID{} }
func (m *PeerID) String() string            { return proto.CompactTextString(m) }
func (*PeerID) ProtoMessage()               {}
func (*PeerID) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *PeerID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PeerEndpoint struct {
	ID      *PeerID           `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Address string            `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Type    PeerEndpoint_Type `protobuf:"varint,3,opt,name=type,enum=protos.PeerEndpoint_Type" json:"type,omitempty"`
	PkiID   []byte            `protobuf:"bytes,4,opt,name=pkiID,proto3" json:"pkiID,omitempty"`
}

func (m *PeerEndpoint) Reset()                    { *m = PeerEndpoint{} }
func (m *PeerEndpoint) String() string            { return proto.CompactTextString(m) }
func (*PeerEndpoint) ProtoMessage()               {}
func (*PeerEndpoint) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *PeerEndpoint) GetID() *PeerID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *PeerEndpoint) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PeerEndpoint) GetType() PeerEndpoint_Type {
	if m != nil {
		return m.Type
	}
	return PeerEndpoint_UNDEFINED
}

func (m *PeerEndpoint) GetPkiID() []byte {
	if m != nil {
		return m.PkiID
	}
	return nil
}

type PeersMessage struct {
	Peers []*PeerEndpoint `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *PeersMessage) Reset()                    { *m = PeersMessage{} }
func (m *PeersMessage) String() string            { return proto.CompactTextString(m) }
func (*PeersMessage) ProtoMessage()               {}
func (*PeersMessage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *PeersMessage) GetPeers() []*PeerEndpoint {
	if m != nil {
		return m.Peers
	}
	return nil
}

type PeersAddresses struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *PeersAddresses) Reset()                    { *m = PeersAddresses{} }
func (m *PeersAddresses) String() string            { return proto.CompactTextString(m) }
func (*PeersAddresses) ProtoMessage()               {}
func (*PeersAddresses) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *PeersAddresses) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type HelloMessage struct {
	PeerEndpoint *PeerEndpoint `protobuf:"bytes,1,opt,name=peerEndpoint" json:"peerEndpoint,omitempty"`
	// BlockchainInfo blockchainInfo = 2;
	PeerCredential []byte `protobuf:"bytes,3,opt,name=peerCredential,proto3" json:"peerCredential,omitempty"`
}

func (m *HelloMessage) Reset()                    { *m = HelloMessage{} }
func (m *HelloMessage) String() string            { return proto.CompactTextString(m) }
func (*HelloMessage) ProtoMessage()               {}
func (*HelloMessage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *HelloMessage) GetPeerEndpoint() *PeerEndpoint {
	if m != nil {
		return m.PeerEndpoint
	}
	return nil
}

func (m *HelloMessage) GetPeerCredential() []byte {
	if m != nil {
		return m.PeerCredential
	}
	return nil
}

type Message struct {
	Type      Message_Type               `protobuf:"varint,1,opt,name=type,enum=protos.Message_Type" json:"type,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Payload   []byte                     `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature []byte                     `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *Message) GetType() Message_Type {
	if m != nil {
		return m.Type
	}
	return Message_UNDEFINED
}

func (m *Message) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Response struct {
	Status Response_StatusCode `protobuf:"varint,1,opt,name=status,enum=protos.Response_StatusCode" json:"status,omitempty"`
	Msg    []byte              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *Response) GetStatus() Response_StatusCode {
	if m != nil {
		return m.Status
	}
	return Response_UNDEFINED
}

func (m *Response) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalState)(nil), "protos.GlobalState")
	proto.RegisterType((*GlobalStateUpdateTask)(nil), "protos.GlobalStateUpdateTask")
	proto.RegisterType((*Transaction)(nil), "protos.Transaction")
	proto.RegisterType((*TransactionBlock)(nil), "protos.TransactionBlock")
	proto.RegisterType((*TransactionResult)(nil), "protos.TransactionResult")
	proto.RegisterType((*Block)(nil), "protos.Block")
	proto.RegisterType((*BlockchainInfo)(nil), "protos.BlockchainInfo")
	proto.RegisterType((*NonHashData)(nil), "protos.NonHashData")
	proto.RegisterType((*PeerAddress)(nil), "protos.PeerAddress")
	proto.RegisterType((*PeerID)(nil), "protos.PeerID")
	proto.RegisterType((*PeerEndpoint)(nil), "protos.PeerEndpoint")
	proto.RegisterType((*PeersMessage)(nil), "protos.PeersMessage")
	proto.RegisterType((*PeersAddresses)(nil), "protos.PeersAddresses")
	proto.RegisterType((*HelloMessage)(nil), "protos.HelloMessage")
	proto.RegisterType((*Message)(nil), "protos.Message")
	proto.RegisterType((*Response)(nil), "protos.Response")
	proto.RegisterEnum("protos.Transaction_Type", Transaction_Type_name, Transaction_Type_value)
	proto.RegisterEnum("protos.PeerEndpoint_Type", PeerEndpoint_Type_name, PeerEndpoint_Type_value)
	proto.RegisterEnum("protos.Message_Type", Message_Type_name, Message_Type_value)
	proto.RegisterEnum("protos.Response_StatusCode", Response_StatusCode_name, Response_StatusCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Peer service

type PeerClient interface {
	// Accepts a stream of Message during chat session, while receiving
	// other Message (e.g. from other peers).
	Chat(ctx context.Context, opts ...grpc.CallOption) (Peer_ChatClient, error)
	// Process a transaction from a remote source.
	ProcessTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Response, error)
}

type peerClient struct {
	cc *grpc.ClientConn
}

func NewPeerClient(cc *grpc.ClientConn) PeerClient {
	return &peerClient{cc}
}

func (c *peerClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Peer_ChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Peer_serviceDesc.Streams[0], c.cc, "/protos.Peer/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerChatClient{stream}
	return x, nil
}

type Peer_ChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type peerChatClient struct {
	grpc.ClientStream
}

func (x *peerChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peerChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peerClient) ProcessTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/protos.Peer/ProcessTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Peer service

type PeerServer interface {
	// Accepts a stream of Message during chat session, while receiving
	// other Message (e.g. from other peers).
	Chat(Peer_ChatServer) error
	// Process a transaction from a remote source.
	ProcessTransaction(context.Context, *Transaction) (*Response, error)
}

func RegisterPeerServer(s *grpc.Server, srv PeerServer) {
	s.RegisterService(&_Peer_serviceDesc, srv)
}

func _Peer_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerServer).Chat(&peerChatServer{stream})
}

type Peer_ChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type peerChatServer struct {
	grpc.ServerStream
}

func (x *peerChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peerChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Peer_ProcessTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).ProcessTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Peer/ProcessTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).ProcessTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Peer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Peer",
	HandlerType: (*PeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessTransaction",
			Handler:    _Peer_ProcessTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Peer_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fabric.proto",
}

func init() { proto.RegisterFile("fabric.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x0e, 0x25, 0x59, 0xb6, 0x46, 0xb2, 0x4c, 0xaf, 0xed, 0x84, 0x71, 0x82, 0xd4, 0x20, 0x8a,
	0xc2, 0x08, 0x52, 0x25, 0x70, 0x10, 0x24, 0x28, 0x50, 0xa0, 0xb2, 0xc8, 0xc4, 0x44, 0x64, 0x4a,
	0x5d, 0xd2, 0x2e, 0xd2, 0x8b, 0xb1, 0x26, 0xd7, 0x32, 0x61, 0x9a, 0x4b, 0x70, 0x29, 0x37, 0xbe,
	0xf6, 0xd8, 0x57, 0xe9, 0xb9, 0xe8, 0x1b, 0xb4, 0x7d, 0x84, 0x02, 0x7d, 0x88, 0x5e, 0x0a, 0xf4,
	0x5a, 0xec, 0x92, 0x94, 0x28, 0x59, 0x4e, 0x9b, 0x5e, 0x92, 0x9d, 0x6f, 0x66, 0x76, 0xe7, 0xe7,
	0xe3, 0x8c, 0x0c, 0xad, 0x33, 0x72, 0x9a, 0x04, 0x5e, 0x27, 0x4e, 0x58, 0xca, 0x50, 0x5d, 0xfe,
	0xc7, 0xb7, 0xd7, 0xbc, 0x73, 0x12, 0x44, 0x1e, 0xf3, 0x69, 0xa6, 0xd8, 0xde, 0x9c, 0x00, 0xf4,
	0x8a, 0x46, 0x69, 0x8e, 0x7e, 0x32, 0x62, 0x6c, 0x14, 0xd2, 0xa7, 0x52, 0x3a, 0x1d, 0x9f, 0x3d,
	0x4d, 0x83, 0x4b, 0xca, 0x53, 0x72, 0x19, 0x67, 0x06, 0xfa, 0xdf, 0x0a, 0x34, 0xdf, 0x84, 0xec,
	0x94, 0x84, 0x4e, 0x4a, 0x52, 0x8a, 0x36, 0x61, 0xc9, 0x63, 0xe3, 0x28, 0xd5, 0x94, 0x1d, 0x65,
	0xb7, 0x86, 0x33, 0x01, 0x3d, 0x81, 0xf5, 0x88, 0xbe, 0x4f, 0x6d, 0xe6, 0x53, 0x69, 0x76, 0x40,
	0xf8, 0xb9, 0x56, 0xdd, 0xa9, 0xee, 0xb6, 0xf0, 0x4d, 0x05, 0x7a, 0x06, 0x1b, 0x31, 0x49, 0x68,
	0x34, 0x67, 0x5f, 0x93, 0xf6, 0x8b, 0x54, 0xe8, 0x15, 0xdc, 0x0b, 0x09, 0x4f, 0xf7, 0x13, 0x12,
	0x79, 0xe7, 0xb3, 0x5e, 0x4b, 0x3b, 0xca, 0x6e, 0x0b, 0xdf, 0xa6, 0x16, 0x9e, 0x22, 0x80, 0x45,
	0x9e, 0xcb, 0x99, 0xe7, 0x2d, 0x6a, 0xfd, 0x67, 0x05, 0xb6, 0x4a, 0x99, 0x1f, 0xc5, 0x3e, 0x49,
	0xa9, 0x4b, 0xf8, 0x05, 0xba, 0x0b, 0xf5, 0x94, 0x24, 0x23, 0x9a, 0x15, 0xa1, 0x85, 0x73, 0x09,
	0x7d, 0x0a, 0xab, 0xd9, 0xc9, 0xf4, 0x47, 0x74, 0x9f, 0x8e, 0xb4, 0x8a, 0x54, 0xcf, 0x82, 0xb3,
	0x56, 0x66, 0xe4, 0x6b, 0xd5, 0x79, 0x2b, 0x33, 0xf2, 0xd1, 0x36, 0xac, 0x64, 0x80, 0xe5, 0x6b,
	0x35, 0x59, 0xea, 0x89, 0x8c, 0x1e, 0x01, 0x04, 0x7c, 0x9f, 0x78, 0x17, 0xdf, 0x91, 0xc4, 0xd7,
	0xea, 0x3b, 0xca, 0xee, 0x0a, 0x2e, 0x21, 0xfa, 0xef, 0x35, 0x68, 0xba, 0x09, 0x89, 0x38, 0xf1,
	0xd2, 0x80, 0x45, 0xe8, 0x09, 0xd4, 0xd2, 0xeb, 0x98, 0xca, 0x68, 0xdb, 0x7b, 0x5a, 0xd6, 0x59,
	0xde, 0x29, 0x99, 0x74, 0xdc, 0xeb, 0x98, 0x62, 0x69, 0x85, 0x76, 0xa0, 0x39, 0xa1, 0x8a, 0x65,
	0xe4, 0x39, 0x94, 0x21, 0xa4, 0xc1, 0x72, 0x4c, 0xae, 0x43, 0x46, 0x8a, 0xd8, 0x0b, 0x51, 0x44,
	0x7d, 0x49, 0x53, 0xe2, 0x93, 0x94, 0xc8, 0xa8, 0x5b, 0x78, 0x22, 0x23, 0x04, 0xb5, 0xf4, 0x7d,
	0xe0, 0xcb, 0x86, 0x35, 0xb0, 0x3c, 0xa3, 0x57, 0xd0, 0x98, 0x10, 0x4e, 0x26, 0xd2, 0xdc, 0xdb,
	0xee, 0x64, 0x94, 0xec, 0x14, 0x94, 0xec, 0xb8, 0x85, 0x05, 0x9e, 0x1a, 0xa3, 0x21, 0x6c, 0x7a,
	0x2c, 0x3a, 0x0b, 0x7c, 0x1a, 0xa5, 0x01, 0x09, 0x83, 0xf4, 0xba, 0x4f, 0xaf, 0x68, 0x28, 0x9b,
	0xda, 0xde, 0x7b, 0x58, 0xe4, 0xd8, 0x5b, 0x60, 0x83, 0x17, 0x7a, 0xa2, 0xd7, 0xf0, 0x68, 0x0e,
	0x1f, 0x8a, 0x3b, 0x3c, 0x16, 0x1e, 0xd3, 0x84, 0x07, 0x2c, 0xd2, 0x56, 0x64, 0xe4, 0xff, 0x62,
	0x25, 0xbe, 0x90, 0x88, 0x45, 0x1e, 0xd5, 0x1a, 0xb2, 0x00, 0x99, 0x80, 0x74, 0x68, 0xa5, 0xec,
	0x98, 0x84, 0x81, 0x4f, 0x52, 0x96, 0x70, 0x0d, 0xa4, 0x72, 0x06, 0x13, 0x15, 0xf2, 0x68, 0x92,
	0x6a, 0x4d, 0xa9, 0x93, 0x67, 0xf4, 0x10, 0x1a, 0x3c, 0x18, 0x45, 0x24, 0x1d, 0x27, 0x54, 0x6b,
	0x49, 0xc5, 0x14, 0xd0, 0x19, 0xd4, 0x44, 0xe7, 0xd0, 0x2a, 0x34, 0x8e, 0x6c, 0xc3, 0x7c, 0x6d,
	0xd9, 0xa6, 0xa1, 0xde, 0x41, 0x9b, 0xa0, 0xf6, 0x0e, 0xba, 0x96, 0xdd, 0x1b, 0x18, 0xe6, 0x89,
	0x61, 0x0e, 0xfb, 0x83, 0x77, 0xaa, 0x32, 0x8b, 0x5a, 0xf6, 0xf1, 0xe0, 0xad, 0xa9, 0x56, 0xd0,
	0x06, 0xac, 0x4d, 0xd1, 0xaf, 0x8f, 0x4c, 0xfc, 0x4e, 0xad, 0xa2, 0x7b, 0xb0, 0x31, 0x05, 0x5d,
	0x13, 0x1f, 0x5a, 0x76, 0xd7, 0x35, 0xd5, 0x9a, 0xfe, 0x16, 0xd4, 0x12, 0x6d, 0xf6, 0x43, 0xe6,
	0x5d, 0xa0, 0x97, 0xd0, 0x4a, 0xa7, 0x18, 0xd7, 0x94, 0x9d, 0xea, 0x6e, 0x73, 0x6f, 0x63, 0x01,
	0xcd, 0xf0, 0x8c, 0xa1, 0xfe, 0x93, 0x02, 0xeb, 0x65, 0x2d, 0xe5, 0xe3, 0x30, 0x9d, 0xf0, 0x44,
	0x29, 0xf1, 0xe4, 0x2e, 0xd4, 0x13, 0xa9, 0xcd, 0xe9, 0x98, 0x4b, 0xa2, 0x3a, 0x34, 0x49, 0x58,
	0xd2, 0x63, 0x3e, 0x95, 0x5c, 0x5c, 0xc5, 0x53, 0x40, 0x74, 0x42, 0x0a, 0x92, 0x8a, 0x0d, 0x9c,
	0x09, 0xe8, 0x2b, 0x98, 0xce, 0x46, 0x53, 0x8c, 0x42, 0xae, 0xd5, 0x65, 0xc4, 0x77, 0x27, 0xa4,
	0x99, 0x51, 0xe3, 0x79, 0x73, 0xfd, 0x8f, 0x0a, 0x2c, 0x65, 0xa9, 0x6b, 0xb0, 0x7c, 0x95, 0x93,
	0x43, 0x91, 0xaf, 0x17, 0xe2, 0x2c, 0xb3, 0x2b, 0x1f, 0xc3, 0xec, 0xf9, 0x72, 0x56, 0xff, 0x63,
	0x39, 0x25, 0x55, 0x4a, 0xc3, 0x34, 0xa3, 0xca, 0x64, 0x10, 0x3e, 0x81, 0xf5, 0x38, 0xa1, 0x57,
	0x01, 0x1b, 0x73, 0x19, 0x7b, 0x69, 0x78, 0xde, 0x54, 0x08, 0x6b, 0x8f, 0x45, 0x9c, 0x46, 0x7c,
	0xcc, 0x0f, 0x8b, 0x2f, 0xba, 0x9e, 0x59, 0xdf, 0x50, 0xa0, 0x17, 0xd0, 0x8c, 0x58, 0x24, 0x1c,
	0x0d, 0x61, 0xb7, 0x2c, 0xd3, 0x9d, 0x44, 0x6c, 0x4f, 0x55, 0xb8, 0x6c, 0x27, 0xfa, 0x23, 0xba,
	0xcb, 0xb5, 0x95, 0x9d, 0xaa, 0xe8, 0x8f, 0x14, 0xf4, 0xef, 0x15, 0x68, 0xcb, 0x40, 0x64, 0xd9,
	0xad, 0xe8, 0x8c, 0x89, 0xf6, 0x9f, 0xd3, 0x60, 0x74, 0x5e, 0x6c, 0x9d, 0x5c, 0x42, 0x8f, 0x41,
	0xf5, 0xc6, 0x89, 0x58, 0x17, 0xd3, 0x94, 0x32, 0x82, 0xdc, 0xc0, 0x17, 0xe7, 0x5f, 0xbd, 0x25,
	0x7f, 0xfd, 0x47, 0x05, 0x9a, 0xa5, 0xb8, 0xd1, 0xb7, 0xb0, 0x1d, 0x32, 0x8f, 0x84, 0x7d, 0xea,
	0x8f, 0x68, 0xd2, 0x63, 0x97, 0x97, 0x41, 0x3a, 0xe9, 0x9e, 0x8c, 0xea, 0xc3, 0xfd, 0xfd, 0x80,
	0xf7, 0x22, 0x42, 0x56, 0x3e, 0x8e, 0x90, 0x2f, 0xa0, 0x39, 0xa4, 0x34, 0xe9, 0xfa, 0x7e, 0x42,
	0xb9, 0x9c, 0x23, 0xe7, 0x8c, 0xa7, 0xc5, 0x17, 0x24, 0xce, 0x02, 0x8b, 0x59, 0x92, 0x7d, 0x3f,
	0x4b, 0x58, 0x9e, 0xf5, 0x87, 0x50, 0x17, 0x6e, 0x96, 0x21, 0xb4, 0x11, 0xb9, 0xa4, 0x85, 0x87,
	0x38, 0xeb, 0xbf, 0x28, 0xd0, 0x12, 0x6a, 0x33, 0xf2, 0x63, 0x16, 0x44, 0x29, 0x7a, 0x04, 0x15,
	0xcb, 0xc8, 0x73, 0x6d, 0x17, 0xa1, 0x65, 0x17, 0xe0, 0x4a, 0xb6, 0x16, 0x48, 0x16, 0x81, 0x7c,
	0xa5, 0x81, 0x0b, 0x11, 0x7d, 0x9e, 0x2f, 0xa0, 0xaa, 0x1c, 0xce, 0xf7, 0xcb, 0xbe, 0xc5, 0xed,
	0xe5, 0x0d, 0xb4, 0x09, 0x4b, 0xf1, 0x45, 0x60, 0x19, 0x39, 0x89, 0x33, 0x41, 0x7f, 0xb9, 0x78,
	0xd6, 0xad, 0x42, 0xe3, 0xb8, 0xdb, 0xb7, 0x8c, 0xae, 0x3b, 0xc0, 0xaa, 0x82, 0xd6, 0x61, 0xd5,
	0x1e, 0xd8, 0x27, 0x53, 0xa8, 0xa2, 0x7f, 0x91, 0xe5, 0xc1, 0x0f, 0x29, 0xe7, 0x64, 0x44, 0xd1,
	0x63, 0x58, 0x8a, 0x85, 0x9c, 0x0f, 0xaa, 0xcd, 0x45, 0xe1, 0xe0, 0xcc, 0x44, 0xef, 0x40, 0x5b,
	0xfa, 0xe6, 0xa5, 0xa5, 0xf2, 0x2b, 0x23, 0x85, 0x20, 0x6f, 0x68, 0xe0, 0x29, 0xa0, 0xc7, 0xd0,
	0x3a, 0xa0, 0x61, 0xc8, 0x8a, 0xb7, 0x5e, 0x41, 0x2b, 0x2e, 0x5d, 0x9b, 0x57, 0x6f, 0xf1, 0x93,
	0x33, 0x96, 0xe8, 0x33, 0x68, 0x0b, 0xb9, 0x97, 0xd0, 0x7c, 0xd5, 0xe4, 0x64, 0x9d, 0x43, 0xf5,
	0x3f, 0xab, 0xb0, 0x5c, 0xbc, 0xb6, 0x3b, 0xb3, 0xe8, 0x27, 0xaf, 0xe4, 0xea, 0x72, 0x89, 0xff,
	0xff, 0x78, 0xba, 0x7d, 0xf9, 0xcf, 0xac, 0xaa, 0xda, 0xfc, 0xaa, 0xfa, 0xb5, 0xb2, 0xb8, 0x7f,
	0x6d, 0x00, 0xc3, 0x72, 0x7a, 0x27, 0x07, 0x66, 0xbf, 0x3f, 0x50, 0x15, 0xb1, 0x8f, 0xa4, 0x2c,
	0xfe, 0x19, 0xd8, 0xb6, 0xd9, 0x73, 0xd5, 0x0a, 0x42, 0xd0, 0x96, 0xe0, 0x1b, 0xd3, 0x3d, 0x19,
	0x9a, 0x26, 0x76, 0xd4, 0xea, 0xc4, 0x31, 0x93, 0x6b, 0x68, 0x0d, 0x9a, 0x52, 0xb6, 0xcd, 0x6f,
	0x0e, 0x9d, 0x37, 0xea, 0x12, 0xda, 0x82, 0x75, 0xb9, 0xc4, 0x4e, 0x5c, 0xdc, 0xb5, 0x9d, 0x6e,
	0xcf, 0xb5, 0x06, 0xb6, 0x5a, 0x17, 0x0f, 0x38, 0xef, 0xec, 0xec, 0xae, 0xfd, 0xfe, 0xa0, 0xf7,
	0xd6, 0x51, 0x9b, 0xc2, 0x59, 0x82, 0x39, 0xd0, 0x12, 0xcb, 0x72, 0x0a, 0x9c, 0x74, 0x0d, 0xc3,
	0x34, 0xd4, 0x55, 0xf4, 0x00, 0xee, 0x49, 0xd4, 0x71, 0xbb, 0xae, 0x29, 0x6f, 0x70, 0xec, 0xee,
	0xd0, 0x39, 0x18, 0xb8, 0x6a, 0x5b, 0x2c, 0xcd, 0x92, 0x72, 0xa2, 0x58, 0x43, 0xf7, 0x61, 0x6b,
	0xce, 0xcb, 0x30, 0xfb, 0x6e, 0xd7, 0x51, 0x55, 0x11, 0x63, 0x49, 0x95, 0xc3, 0xeb, 0xa8, 0x05,
	0x2b, 0xd8, 0x74, 0x86, 0x03, 0xdb, 0x31, 0xd5, 0x4d, 0x51, 0xb1, 0x9e, 0x38, 0xda, 0xce, 0x91,
	0xa3, 0x6e, 0xe9, 0x3f, 0x28, 0xb0, 0x82, 0x29, 0x8f, 0xc5, 0x18, 0x46, 0xcf, 0xa1, 0x2e, 0x66,
	0xfc, 0x98, 0xe7, 0x4d, 0x7f, 0x50, 0x34, 0xbd, 0xb0, 0xe8, 0x38, 0x52, 0x2d, 0x16, 0x22, 0xce,
	0x4d, 0x91, 0x0a, 0xd5, 0x4b, 0x5e, 0xfc, 0x3c, 0x15, 0x47, 0xfd, 0x25, 0xc0, 0xd4, 0x6e, 0xbe,
	0x45, 0x2d, 0x58, 0x76, 0x8e, 0x7a, 0x3d, 0xd3, 0x71, 0xd4, 0xdf, 0x14, 0x21, 0xbd, 0xee, 0x5a,
	0xfd, 0x23, 0x6c, 0xaa, 0x7f, 0x55, 0xf7, 0xc6, 0x50, 0x13, 0x24, 0x46, 0x1d, 0xa8, 0xf5, 0xce,
	0x49, 0x8a, 0xd6, 0xe6, 0x48, 0xb7, 0x3d, 0x0f, 0xe8, 0x77, 0x76, 0x95, 0x67, 0x0a, 0xfa, 0x12,
	0xd0, 0x30, 0x61, 0x1e, 0xe5, 0xbc, 0xfc, 0x4b, 0x75, 0xd1, 0x96, 0xdb, 0x56, 0xe7, 0x53, 0xd2,
	0xef, 0x9c, 0x66, 0x7f, 0xe6, 0x3c, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff, 0x16, 0xcc, 0x7d, 0xf8,
	0xfd, 0x0c, 0x00, 0x00,
}
