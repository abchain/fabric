// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fabric.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Transaction_Type int32

const (
	Transaction_UNDEFINED Transaction_Type = 0
	// deploy a chaincode to the network and call `Init` function
	Transaction_CHAINCODE_DEPLOY Transaction_Type = 1
	// call a chaincode `Invoke` function as a transaction
	Transaction_CHAINCODE_INVOKE Transaction_Type = 2
	// call a chaincode `query` function
	Transaction_CHAINCODE_QUERY Transaction_Type = 3
	// terminate a chaincode; not implemented yet
	Transaction_CHAINCODE_TERMINATE Transaction_Type = 4
)

var Transaction_Type_name = map[int32]string{
	0: "UNDEFINED",
	1: "CHAINCODE_DEPLOY",
	2: "CHAINCODE_INVOKE",
	3: "CHAINCODE_QUERY",
	4: "CHAINCODE_TERMINATE",
}
var Transaction_Type_value = map[string]int32{
	"UNDEFINED":           0,
	"CHAINCODE_DEPLOY":    1,
	"CHAINCODE_INVOKE":    2,
	"CHAINCODE_QUERY":     3,
	"CHAINCODE_TERMINATE": 4,
}

func (x Transaction_Type) String() string {
	return proto.EnumName(Transaction_Type_name, int32(x))
}
func (Transaction_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 0} }

type PeerEndpoint_Type int32

const (
	PeerEndpoint_UNDEFINED     PeerEndpoint_Type = 0
	PeerEndpoint_VALIDATOR     PeerEndpoint_Type = 1
	PeerEndpoint_NON_VALIDATOR PeerEndpoint_Type = 2
)

var PeerEndpoint_Type_name = map[int32]string{
	0: "UNDEFINED",
	1: "VALIDATOR",
	2: "NON_VALIDATOR",
}
var PeerEndpoint_Type_value = map[string]int32{
	"UNDEFINED":     0,
	"VALIDATOR":     1,
	"NON_VALIDATOR": 2,
}

func (x PeerEndpoint_Type) String() string {
	return proto.EnumName(PeerEndpoint_Type_name, int32(x))
}
func (PeerEndpoint_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{8, 0} }

type Message_Type int32

const (
	Message_UNDEFINED               Message_Type = 0
	Message_DISC_HELLO              Message_Type = 1
	Message_DISC_DISCONNECT         Message_Type = 2
	Message_DISC_GET_PEERS          Message_Type = 3
	Message_DISC_PEERS              Message_Type = 4
	Message_DISC_NEWMSG             Message_Type = 5
	Message_CHAIN_TRANSACTION       Message_Type = 6
	Message_SYNC_GET_BLOCKS         Message_Type = 11
	Message_SYNC_BLOCKS             Message_Type = 12
	Message_SYNC_BLOCK_ADDED        Message_Type = 13
	Message_SYNC_STATE_GET_SNAPSHOT Message_Type = 14
	Message_SYNC_STATE_SNAPSHOT     Message_Type = 15
	Message_SYNC_STATE_GET_DELTAS   Message_Type = 16
	Message_SYNC_STATE_DELTAS       Message_Type = 17
	Message_RESPONSE                Message_Type = 20
	Message_CONSENSUS               Message_Type = 21
)

var Message_Type_name = map[int32]string{
	0:  "UNDEFINED",
	1:  "DISC_HELLO",
	2:  "DISC_DISCONNECT",
	3:  "DISC_GET_PEERS",
	4:  "DISC_PEERS",
	5:  "DISC_NEWMSG",
	6:  "CHAIN_TRANSACTION",
	11: "SYNC_GET_BLOCKS",
	12: "SYNC_BLOCKS",
	13: "SYNC_BLOCK_ADDED",
	14: "SYNC_STATE_GET_SNAPSHOT",
	15: "SYNC_STATE_SNAPSHOT",
	16: "SYNC_STATE_GET_DELTAS",
	17: "SYNC_STATE_DELTAS",
	20: "RESPONSE",
	21: "CONSENSUS",
}
var Message_Type_value = map[string]int32{
	"UNDEFINED":               0,
	"DISC_HELLO":              1,
	"DISC_DISCONNECT":         2,
	"DISC_GET_PEERS":          3,
	"DISC_PEERS":              4,
	"DISC_NEWMSG":             5,
	"CHAIN_TRANSACTION":       6,
	"SYNC_GET_BLOCKS":         11,
	"SYNC_BLOCKS":             12,
	"SYNC_BLOCK_ADDED":        13,
	"SYNC_STATE_GET_SNAPSHOT": 14,
	"SYNC_STATE_SNAPSHOT":     15,
	"SYNC_STATE_GET_DELTAS":   16,
	"SYNC_STATE_DELTAS":       17,
	"RESPONSE":                20,
	"CONSENSUS":               21,
}

func (x Message_Type) String() string {
	return proto.EnumName(Message_Type_name, int32(x))
}
func (Message_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{14, 0} }

type Response_StatusCode int32

const (
	Response_UNDEFINED Response_StatusCode = 0
	Response_SUCCESS   Response_StatusCode = 200
	Response_FAILURE   Response_StatusCode = 500
)

var Response_StatusCode_name = map[int32]string{
	0:   "UNDEFINED",
	200: "SUCCESS",
	500: "FAILURE",
}
var Response_StatusCode_value = map[string]int32{
	"UNDEFINED": 0,
	"SUCCESS":   200,
	"FAILURE":   500,
}

func (x Response_StatusCode) String() string {
	return proto.EnumName(Response_StatusCode_name, int32(x))
}
func (Response_StatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{15, 0} }

type SyncMsg_Type int32

const (
	SyncMsg_UNDEFINED                 SyncMsg_Type = 0
	SyncMsg_SYNC_STATE_NOTIFY         SyncMsg_Type = 1
	SyncMsg_SYNC_STATE_OPT            SyncMsg_Type = 2
	SyncMsg_SYNC_SESSION_START        SyncMsg_Type = 5
	SyncMsg_SYNC_SESSION_QUERY        SyncMsg_Type = 6
	SyncMsg_SYNC_SESSION_RESPONSE     SyncMsg_Type = 7
	SyncMsg_SYNC_SESSION_END          SyncMsg_Type = 8
	SyncMsg_SYNC_SESSION_GET_BLOCKS   SyncMsg_Type = 11
	SyncMsg_SYNC_SESSION_BLOCKS       SyncMsg_Type = 12
	SyncMsg_SYNC_SESSION_GET_SNAPSHOT SyncMsg_Type = 14
	SyncMsg_SYNC_SESSION_SNAPSHOT     SyncMsg_Type = 15
	SyncMsg_SYNC_SESSION_GET_DELTAS   SyncMsg_Type = 16
	SyncMsg_SYNC_SESSION_DELTAS       SyncMsg_Type = 17
)

var SyncMsg_Type_name = map[int32]string{
	0:  "UNDEFINED",
	1:  "SYNC_STATE_NOTIFY",
	2:  "SYNC_STATE_OPT",
	5:  "SYNC_SESSION_START",
	6:  "SYNC_SESSION_QUERY",
	7:  "SYNC_SESSION_RESPONSE",
	8:  "SYNC_SESSION_END",
	11: "SYNC_SESSION_GET_BLOCKS",
	12: "SYNC_SESSION_BLOCKS",
	14: "SYNC_SESSION_GET_SNAPSHOT",
	15: "SYNC_SESSION_SNAPSHOT",
	16: "SYNC_SESSION_GET_DELTAS",
	17: "SYNC_SESSION_DELTAS",
}
var SyncMsg_Type_value = map[string]int32{
	"UNDEFINED":                 0,
	"SYNC_STATE_NOTIFY":         1,
	"SYNC_STATE_OPT":            2,
	"SYNC_SESSION_START":        5,
	"SYNC_SESSION_QUERY":        6,
	"SYNC_SESSION_RESPONSE":     7,
	"SYNC_SESSION_END":          8,
	"SYNC_SESSION_GET_BLOCKS":   11,
	"SYNC_SESSION_BLOCKS":       12,
	"SYNC_SESSION_GET_SNAPSHOT": 14,
	"SYNC_SESSION_SNAPSHOT":     15,
	"SYNC_SESSION_GET_DELTAS":   16,
	"SYNC_SESSION_DELTAS":       17,
}

func (x SyncMsg_Type) String() string {
	return proto.EnumName(SyncMsg_Type_name, int32(x))
}
func (SyncMsg_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{24, 0} }

// Transaction defines a function call to a contract.
// `args` is an array of type string so that the chaincode writer can choose
// whatever format they wish for the arguments for their chaincode.
// For example, they may wish to use JSON, XML, or a custom format.
// TODO: Defined remaining fields.
type Transaction struct {
	Type Transaction_Type `protobuf:"varint,1,opt,name=type,enum=protos.Transaction_Type" json:"type,omitempty"`
	// store ChaincodeID as bytes so its encrypted value can be stored
	ChaincodeID                    []byte                     `protobuf:"bytes,2,opt,name=chaincodeID,proto3" json:"chaincodeID,omitempty"`
	Payload                        []byte                     `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Metadata                       []byte                     `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Txid                           string                     `protobuf:"bytes,5,opt,name=txid" json:"txid,omitempty"`
	Timestamp                      *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=timestamp" json:"timestamp,omitempty"`
	ConfidentialityLevel           ConfidentialityLevel       `protobuf:"varint,7,opt,name=confidentialityLevel,enum=protos.ConfidentialityLevel" json:"confidentialityLevel,omitempty"`
	ConfidentialityProtocolVersion string                     `protobuf:"bytes,8,opt,name=confidentialityProtocolVersion" json:"confidentialityProtocolVersion,omitempty"`
	Nonce                          []byte                     `protobuf:"bytes,9,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ToValidators                   []byte                     `protobuf:"bytes,10,opt,name=toValidators,proto3" json:"toValidators,omitempty"`
	Cert                           []byte                     `protobuf:"bytes,11,opt,name=cert,proto3" json:"cert,omitempty"`
	Signature                      []byte                     `protobuf:"bytes,12,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Transaction) GetType() Transaction_Type {
	if m != nil {
		return m.Type
	}
	return Transaction_UNDEFINED
}

func (m *Transaction) GetChaincodeID() []byte {
	if m != nil {
		return m.ChaincodeID
	}
	return nil
}

func (m *Transaction) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Transaction) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Transaction) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *Transaction) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Transaction) GetConfidentialityLevel() ConfidentialityLevel {
	if m != nil {
		return m.ConfidentialityLevel
	}
	return ConfidentialityLevel_PUBLIC
}

func (m *Transaction) GetConfidentialityProtocolVersion() string {
	if m != nil {
		return m.ConfidentialityProtocolVersion
	}
	return ""
}

func (m *Transaction) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *Transaction) GetToValidators() []byte {
	if m != nil {
		return m.ToValidators
	}
	return nil
}

func (m *Transaction) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *Transaction) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// TransactionBlock carries a batch of transactions.
type TransactionBlock struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *TransactionBlock) Reset()                    { *m = TransactionBlock{} }
func (m *TransactionBlock) String() string            { return proto.CompactTextString(m) }
func (*TransactionBlock) ProtoMessage()               {}
func (*TransactionBlock) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *TransactionBlock) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

// TransactionResult contains the return value of a transaction. It does
// not track potential state changes that were a result of the transaction.
// txid - The unique identifier of this transaction.
// result - The return value of the transaction.
// errorCode - An error code. 5xx will be logged as a failure in the dashboard.
// error - An error string for logging an issue.
// chaincodeEvent - any event emitted by a transaction
type TransactionResult struct {
	Txid           string          `protobuf:"bytes,1,opt,name=txid" json:"txid,omitempty"`
	Result         []byte          `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	ErrorCode      uint32          `protobuf:"varint,3,opt,name=errorCode" json:"errorCode,omitempty"`
	Error          string          `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	ChaincodeEvent *ChaincodeEvent `protobuf:"bytes,5,opt,name=chaincodeEvent" json:"chaincodeEvent,omitempty"`
}

func (m *TransactionResult) Reset()                    { *m = TransactionResult{} }
func (m *TransactionResult) String() string            { return proto.CompactTextString(m) }
func (*TransactionResult) ProtoMessage()               {}
func (*TransactionResult) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *TransactionResult) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *TransactionResult) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *TransactionResult) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *TransactionResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TransactionResult) GetChaincodeEvent() *ChaincodeEvent {
	if m != nil {
		return m.ChaincodeEvent
	}
	return nil
}

// Block carries The data that describes a block in the blockchain.
// version - Version used to track any protocol changes.
// timestamp - The time at which the block or transaction order
// was proposed. This may not be used by all consensus modules.
// transactions - The ordered list of transactions in the block.
// stateHash - The state hash after running transactions in this block.
// previousBlockHash - The hash of the previous block in the chain.
// consensusMetadata - Consensus modules may optionally store any
// additional metadata in this field.
// nonHashData - Data stored with the block, but not included in the blocks
// hash. This allows this data to be different per peer or discarded without
// impacting the blockchain.
type Block struct {
	Version           uint32                     `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Timestamp         *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Transactions      []*Transaction             `protobuf:"bytes,3,rep,name=transactions" json:"transactions,omitempty"`
	StateHash         []byte                     `protobuf:"bytes,4,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	PreviousBlockHash []byte                     `protobuf:"bytes,5,opt,name=previousBlockHash,proto3" json:"previousBlockHash,omitempty"`
	ConsensusMetadata []byte                     `protobuf:"bytes,6,opt,name=consensusMetadata,proto3" json:"consensusMetadata,omitempty"`
	NonHashData       *NonHashData               `protobuf:"bytes,7,opt,name=nonHashData" json:"nonHashData,omitempty"`
	Txids             []string                   `protobuf:"bytes,8,rep,name=txids" json:"txids,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *Block) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Block) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Block) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *Block) GetPreviousBlockHash() []byte {
	if m != nil {
		return m.PreviousBlockHash
	}
	return nil
}

func (m *Block) GetConsensusMetadata() []byte {
	if m != nil {
		return m.ConsensusMetadata
	}
	return nil
}

func (m *Block) GetNonHashData() *NonHashData {
	if m != nil {
		return m.NonHashData
	}
	return nil
}

func (m *Block) GetTxids() []string {
	if m != nil {
		return m.Txids
	}
	return nil
}

// Contains information about the blockchain ledger such as height, current
// block hash, and previous block hash.
type BlockchainInfo struct {
	Height            uint64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	CurrentBlockHash  []byte `protobuf:"bytes,2,opt,name=currentBlockHash,proto3" json:"currentBlockHash,omitempty"`
	PreviousBlockHash []byte `protobuf:"bytes,3,opt,name=previousBlockHash,proto3" json:"previousBlockHash,omitempty"`
}

func (m *BlockchainInfo) Reset()                    { *m = BlockchainInfo{} }
func (m *BlockchainInfo) String() string            { return proto.CompactTextString(m) }
func (*BlockchainInfo) ProtoMessage()               {}
func (*BlockchainInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *BlockchainInfo) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockchainInfo) GetCurrentBlockHash() []byte {
	if m != nil {
		return m.CurrentBlockHash
	}
	return nil
}

func (m *BlockchainInfo) GetPreviousBlockHash() []byte {
	if m != nil {
		return m.PreviousBlockHash
	}
	return nil
}

// NonHashData is data that is recorded on the block, but not included in
// the block hash when verifying the blockchain.
// localLedgerCommitTimestamp - The time at which the block was added
// to the ledger on the local peer.
// chaincodeEvent - is an array ChaincodeEvents, one per transaction in the
// block
type NonHashData struct {
	LocalLedgerCommitTimestamp *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=localLedgerCommitTimestamp" json:"localLedgerCommitTimestamp,omitempty"`
	ChaincodeEvents            []*ChaincodeEvent          `protobuf:"bytes,2,rep,name=chaincodeEvents" json:"chaincodeEvents,omitempty"`
}

func (m *NonHashData) Reset()                    { *m = NonHashData{} }
func (m *NonHashData) String() string            { return proto.CompactTextString(m) }
func (*NonHashData) ProtoMessage()               {}
func (*NonHashData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *NonHashData) GetLocalLedgerCommitTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.LocalLedgerCommitTimestamp
	}
	return nil
}

func (m *NonHashData) GetChaincodeEvents() []*ChaincodeEvent {
	if m != nil {
		return m.ChaincodeEvents
	}
	return nil
}

type PeerAddress struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *PeerAddress) Reset()                    { *m = PeerAddress{} }
func (m *PeerAddress) String() string            { return proto.CompactTextString(m) }
func (*PeerAddress) ProtoMessage()               {}
func (*PeerAddress) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *PeerAddress) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *PeerAddress) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type PeerID struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *PeerID) Reset()                    { *m = PeerID{} }
func (m *PeerID) String() string            { return proto.CompactTextString(m) }
func (*PeerID) ProtoMessage()               {}
func (*PeerID) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *PeerID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PeerEndpoint struct {
	ID      *PeerID           `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Address string            `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Type    PeerEndpoint_Type `protobuf:"varint,3,opt,name=type,enum=protos.PeerEndpoint_Type" json:"type,omitempty"`
	PkiID   []byte            `protobuf:"bytes,4,opt,name=pkiID,proto3" json:"pkiID,omitempty"`
}

func (m *PeerEndpoint) Reset()                    { *m = PeerEndpoint{} }
func (m *PeerEndpoint) String() string            { return proto.CompactTextString(m) }
func (*PeerEndpoint) ProtoMessage()               {}
func (*PeerEndpoint) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *PeerEndpoint) GetID() *PeerID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *PeerEndpoint) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PeerEndpoint) GetType() PeerEndpoint_Type {
	if m != nil {
		return m.Type
	}
	return PeerEndpoint_UNDEFINED
}

func (m *PeerEndpoint) GetPkiID() []byte {
	if m != nil {
		return m.PkiID
	}
	return nil
}

type PeersMessage struct {
	Peers []*PeerEndpoint `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *PeersMessage) Reset()                    { *m = PeersMessage{} }
func (m *PeersMessage) String() string            { return proto.CompactTextString(m) }
func (*PeersMessage) ProtoMessage()               {}
func (*PeersMessage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *PeersMessage) GetPeers() []*PeerEndpoint {
	if m != nil {
		return m.Peers
	}
	return nil
}

type PeersAddresses struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *PeersAddresses) Reset()                    { *m = PeersAddresses{} }
func (m *PeersAddresses) String() string            { return proto.CompactTextString(m) }
func (*PeersAddresses) ProtoMessage()               {}
func (*PeersAddresses) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *PeersAddresses) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type HelloMessage struct {
	PeerEndpoint   *PeerEndpoint   `protobuf:"bytes,1,opt,name=peerEndpoint" json:"peerEndpoint,omitempty"`
	BlockchainInfo *BlockchainInfo `protobuf:"bytes,2,opt,name=blockchainInfo" json:"blockchainInfo,omitempty"`
}

func (m *HelloMessage) Reset()                    { *m = HelloMessage{} }
func (m *HelloMessage) String() string            { return proto.CompactTextString(m) }
func (*HelloMessage) ProtoMessage()               {}
func (*HelloMessage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *HelloMessage) GetPeerEndpoint() *PeerEndpoint {
	if m != nil {
		return m.PeerEndpoint
	}
	return nil
}

func (m *HelloMessage) GetBlockchainInfo() *BlockchainInfo {
	if m != nil {
		return m.BlockchainInfo
	}
	return nil
}

type Gossip struct {
	// all the gossip message (with different catalog) MUST share the
	// same series of seq
	Seq     uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Catalog string `protobuf:"bytes,2,opt,name=catalog" json:"catalog,omitempty"`
	// Types that are valid to be assigned to M:
	//	*Gossip_Dig
	//	*Gossip_Ud
	M isGossip_M `protobuf_oneof:"m"`
}

func (m *Gossip) Reset()                    { *m = Gossip{} }
func (m *Gossip) String() string            { return proto.CompactTextString(m) }
func (*Gossip) ProtoMessage()               {}
func (*Gossip) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

type isGossip_M interface {
	isGossip_M()
}

type Gossip_Dig struct {
	Dig *Gossip_Digest `protobuf:"bytes,3,opt,name=dig,oneof"`
}
type Gossip_Ud struct {
	Ud *Gossip_Update `protobuf:"bytes,4,opt,name=ud,oneof"`
}

func (*Gossip_Dig) isGossip_M() {}
func (*Gossip_Ud) isGossip_M()  {}

func (m *Gossip) GetM() isGossip_M {
	if m != nil {
		return m.M
	}
	return nil
}

func (m *Gossip) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *Gossip) GetCatalog() string {
	if m != nil {
		return m.Catalog
	}
	return ""
}

func (m *Gossip) GetDig() *Gossip_Digest {
	if x, ok := m.GetM().(*Gossip_Dig); ok {
		return x.Dig
	}
	return nil
}

func (m *Gossip) GetUd() *Gossip_Update {
	if x, ok := m.GetM().(*Gossip_Ud); ok {
		return x.Ud
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Gossip) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Gossip_OneofMarshaler, _Gossip_OneofUnmarshaler, _Gossip_OneofSizer, []interface{}{
		(*Gossip_Dig)(nil),
		(*Gossip_Ud)(nil),
	}
}

func _Gossip_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Gossip)
	// m
	switch x := m.M.(type) {
	case *Gossip_Dig:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Dig); err != nil {
			return err
		}
	case *Gossip_Ud:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ud); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Gossip.M has unexpected type %T", x)
	}
	return nil
}

func _Gossip_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Gossip)
	switch tag {
	case 3: // m.dig
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Gossip_Digest)
		err := b.DecodeMessage(msg)
		m.M = &Gossip_Dig{msg}
		return true, err
	case 4: // m.ud
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Gossip_Update)
		err := b.DecodeMessage(msg)
		m.M = &Gossip_Ud{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Gossip_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Gossip)
	// m
	switch x := m.M.(type) {
	case *Gossip_Dig:
		s := proto.Size(x.Dig)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Gossip_Ud:
		s := proto.Size(x.Ud)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Gossip_Digest struct {
	// string is used to represent peerID
	Data map[string]*Gossip_Digest_PeerState `protobuf:"bytes,1,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Gossip_Digest) Reset()                    { *m = Gossip_Digest{} }
func (m *Gossip_Digest) String() string            { return proto.CompactTextString(m) }
func (*Gossip_Digest) ProtoMessage()               {}
func (*Gossip_Digest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12, 0} }

func (m *Gossip_Digest) GetData() map[string]*Gossip_Digest_PeerState {
	if m != nil {
		return m.Data
	}
	return nil
}

type Gossip_Digest_PeerState struct {
	State     []byte `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Num       uint64 `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Gossip_Digest_PeerState) Reset()                    { *m = Gossip_Digest_PeerState{} }
func (m *Gossip_Digest_PeerState) String() string            { return proto.CompactTextString(m) }
func (*Gossip_Digest_PeerState) ProtoMessage()               {}
func (*Gossip_Digest_PeerState) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12, 0, 0} }

func (m *Gossip_Digest_PeerState) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Gossip_Digest_PeerState) GetNum() uint64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *Gossip_Digest_PeerState) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Gossip_Update struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Gossip_Update) Reset()                    { *m = Gossip_Update{} }
func (m *Gossip_Update) String() string            { return proto.CompactTextString(m) }
func (*Gossip_Update) ProtoMessage()               {}
func (*Gossip_Update) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12, 1} }

func (m *Gossip_Update) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Gossip_Tx struct {
	State []byte            `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Num   uint32            `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	Txs   *TransactionBlock `protobuf:"bytes,4,opt,name=txs" json:"txs,omitempty"`
}

func (m *Gossip_Tx) Reset()                    { *m = Gossip_Tx{} }
func (m *Gossip_Tx) String() string            { return proto.CompactTextString(m) }
func (*Gossip_Tx) ProtoMessage()               {}
func (*Gossip_Tx) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *Gossip_Tx) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Gossip_Tx) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *Gossip_Tx) GetTxs() *TransactionBlock {
	if m != nil {
		return m.Txs
	}
	return nil
}

type Message struct {
	Type      Message_Type               `protobuf:"varint,1,opt,name=type,enum=protos.Message_Type" json:"type,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Payload   []byte                     `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature []byte                     `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *Message) GetType() Message_Type {
	if m != nil {
		return m.Type
	}
	return Message_UNDEFINED
}

func (m *Message) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Response struct {
	Status Response_StatusCode `protobuf:"varint,1,opt,name=status,enum=protos.Response_StatusCode" json:"status,omitempty"`
	Msg    []byte              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *Response) GetStatus() Response_StatusCode {
	if m != nil {
		return m.Status
	}
	return Response_UNDEFINED
}

func (m *Response) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type GlobalState struct {
	Count                   uint64   `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	NextNodeStateHash       [][]byte `protobuf:"bytes,3,rep,name=nextNodeStateHash,proto3" json:"nextNodeStateHash,omitempty"`
	ParentNodeStateHash     [][]byte `protobuf:"bytes,4,rep,name=parentNodeStateHash,proto3" json:"parentNodeStateHash,omitempty"`
	LastBranchNodeStateHash []byte   `protobuf:"bytes,5,opt,name=lastBranchNodeStateHash,proto3" json:"lastBranchNodeStateHash,omitempty"`
	NextBranchNodeStateHash []byte   `protobuf:"bytes,7,opt,name=nextBranchNodeStateHash,proto3" json:"nextBranchNodeStateHash,omitempty"`
}

func (m *GlobalState) Reset()                    { *m = GlobalState{} }
func (m *GlobalState) String() string            { return proto.CompactTextString(m) }
func (*GlobalState) ProtoMessage()               {}
func (*GlobalState) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *GlobalState) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GlobalState) GetNextNodeStateHash() [][]byte {
	if m != nil {
		return m.NextNodeStateHash
	}
	return nil
}

func (m *GlobalState) GetParentNodeStateHash() [][]byte {
	if m != nil {
		return m.ParentNodeStateHash
	}
	return nil
}

func (m *GlobalState) GetLastBranchNodeStateHash() []byte {
	if m != nil {
		return m.LastBranchNodeStateHash
	}
	return nil
}

func (m *GlobalState) GetNextBranchNodeStateHash() []byte {
	if m != nil {
		return m.NextBranchNodeStateHash
	}
	return nil
}

// BlockState is the payload of Message.SYNC_BLOCK_ADDED. When a VP
// commits a new block to the ledger, it will notify its connected NVPs of the
// block and the delta state. The NVP may call the ledger APIs to apply the
// block and the delta state to its ledger if the block's previousBlockHash
// equals to the NVP's current block hash
type BlockState struct {
	Block      *Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	StateDelta []byte `protobuf:"bytes,2,opt,name=stateDelta,proto3" json:"stateDelta,omitempty"`
}

func (m *BlockState) Reset()                    { *m = BlockState{} }
func (m *BlockState) String() string            { return proto.CompactTextString(m) }
func (*BlockState) ProtoMessage()               {}
func (*BlockState) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

func (m *BlockState) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockState) GetStateDelta() []byte {
	if m != nil {
		return m.StateDelta
	}
	return nil
}

// SyncBlockRange is the payload of Message.SYNC_GET_BLOCKS, where
// start and end indicate the starting and ending blocks inclusively. The order
// in which blocks are returned is defined by the start and end values. For
// example, if start=3 and end=5, the order of blocks will be 3, 4, 5.
// If start=5 and end=3, the order will be 5, 4, 3.
type SyncBlockRange struct {
	CorrelationId uint64 `protobuf:"varint,1,opt,name=correlationId" json:"correlationId,omitempty"`
	Start         uint64 `protobuf:"varint,2,opt,name=start" json:"start,omitempty"`
	End           uint64 `protobuf:"varint,3,opt,name=end" json:"end,omitempty"`
}

func (m *SyncBlockRange) Reset()                    { *m = SyncBlockRange{} }
func (m *SyncBlockRange) String() string            { return proto.CompactTextString(m) }
func (*SyncBlockRange) ProtoMessage()               {}
func (*SyncBlockRange) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *SyncBlockRange) GetCorrelationId() uint64 {
	if m != nil {
		return m.CorrelationId
	}
	return 0
}

func (m *SyncBlockRange) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *SyncBlockRange) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

// SyncBlocks is the payload of Message.SYNC_BLOCKS, where the range
// indicates the blocks responded to the request SYNC_GET_BLOCKS
type SyncBlocks struct {
	Range  *SyncBlockRange `protobuf:"bytes,1,opt,name=range" json:"range,omitempty"`
	Blocks []*Block        `protobuf:"bytes,2,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *SyncBlocks) Reset()                    { *m = SyncBlocks{} }
func (m *SyncBlocks) String() string            { return proto.CompactTextString(m) }
func (*SyncBlocks) ProtoMessage()               {}
func (*SyncBlocks) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *SyncBlocks) GetRange() *SyncBlockRange {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *SyncBlocks) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

// SyncSnapshotRequest Payload for the penchainMessage.SYNC_GET_SNAPSHOT message.
type SyncStateSnapshotRequest struct {
	CorrelationId uint64 `protobuf:"varint,1,opt,name=correlationId" json:"correlationId,omitempty"`
}

func (m *SyncStateSnapshotRequest) Reset()                    { *m = SyncStateSnapshotRequest{} }
func (m *SyncStateSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncStateSnapshotRequest) ProtoMessage()               {}
func (*SyncStateSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{20} }

func (m *SyncStateSnapshotRequest) GetCorrelationId() uint64 {
	if m != nil {
		return m.CorrelationId
	}
	return 0
}

// SyncStateSnapshot is the payload of Message.SYNC_SNAPSHOT, which is a response
// to penchainMessage.SYNC_GET_SNAPSHOT. It contains the snapshot or a chunk of the
// snapshot on stream, and in which case, the sequence indicate the order
// starting at 0.  The terminating message will have len(delta) == 0.
type SyncStateSnapshot struct {
	Delta       []byte                    `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
	Sequence    uint64                    `protobuf:"varint,2,opt,name=sequence" json:"sequence,omitempty"`
	BlockNumber uint64                    `protobuf:"varint,3,opt,name=blockNumber" json:"blockNumber,omitempty"`
	Request     *SyncStateSnapshotRequest `protobuf:"bytes,4,opt,name=request" json:"request,omitempty"`
}

func (m *SyncStateSnapshot) Reset()                    { *m = SyncStateSnapshot{} }
func (m *SyncStateSnapshot) String() string            { return proto.CompactTextString(m) }
func (*SyncStateSnapshot) ProtoMessage()               {}
func (*SyncStateSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21} }

func (m *SyncStateSnapshot) GetDelta() []byte {
	if m != nil {
		return m.Delta
	}
	return nil
}

func (m *SyncStateSnapshot) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *SyncStateSnapshot) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *SyncStateSnapshot) GetRequest() *SyncStateSnapshotRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SyncStateDeltasRequest is the payload of Message.SYNC_GET_STATE.
// blockNumber indicates the block number for the delta which is being
// requested. If no payload is included with SYNC_GET_STATE, it represents
// a request for a snapshot of the current state.
type SyncStateDeltasRequest struct {
	Range *SyncBlockRange `protobuf:"bytes,1,opt,name=range" json:"range,omitempty"`
}

func (m *SyncStateDeltasRequest) Reset()                    { *m = SyncStateDeltasRequest{} }
func (m *SyncStateDeltasRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncStateDeltasRequest) ProtoMessage()               {}
func (*SyncStateDeltasRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{22} }

func (m *SyncStateDeltasRequest) GetRange() *SyncBlockRange {
	if m != nil {
		return m.Range
	}
	return nil
}

// SyncStateDeltas is the payload of the Message.SYNC_STATE in response to
// the Message.SYNC_GET_STATE message.
type SyncStateDeltas struct {
	Range  *SyncBlockRange `protobuf:"bytes,1,opt,name=range" json:"range,omitempty"`
	Deltas [][]byte        `protobuf:"bytes,2,rep,name=deltas,proto3" json:"deltas,omitempty"`
}

func (m *SyncStateDeltas) Reset()                    { *m = SyncStateDeltas{} }
func (m *SyncStateDeltas) String() string            { return proto.CompactTextString(m) }
func (*SyncStateDeltas) ProtoMessage()               {}
func (*SyncStateDeltas) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{23} }

func (m *SyncStateDeltas) GetRange() *SyncBlockRange {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *SyncStateDeltas) GetDeltas() [][]byte {
	if m != nil {
		return m.Deltas
	}
	return nil
}

// Like chat, stateSync wrap messages used in a syncing session
type SyncMsg struct {
	Type          SyncMsg_Type `protobuf:"varint,1,opt,name=type,enum=protos.SyncMsg_Type" json:"type,omitempty"`
	CorrelationId uint64       `protobuf:"varint,2,opt,name=correlationId" json:"correlationId,omitempty"`
	Payload       []byte       `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *SyncMsg) Reset()                    { *m = SyncMsg{} }
func (m *SyncMsg) String() string            { return proto.CompactTextString(m) }
func (*SyncMsg) ProtoMessage()               {}
func (*SyncMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{24} }

func (m *SyncMsg) GetType() SyncMsg_Type {
	if m != nil {
		return m.Type
	}
	return SyncMsg_UNDEFINED
}

func (m *SyncMsg) GetCorrelationId() uint64 {
	if m != nil {
		return m.CorrelationId
	}
	return 0
}

func (m *SyncMsg) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// //////////////////////////////
type SyncStateQuery struct {
	Id          uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BlockHeight uint64 `protobuf:"varint,2,opt,name=blockHeight" json:"blockHeight,omitempty"`
}

func (m *SyncStateQuery) Reset()                    { *m = SyncStateQuery{} }
func (m *SyncStateQuery) String() string            { return proto.CompactTextString(m) }
func (*SyncStateQuery) ProtoMessage()               {}
func (*SyncStateQuery) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{25} }

func (m *SyncStateQuery) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SyncStateQuery) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type SyncStateResp struct {
	Id          uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Postive     bool   `protobuf:"varint,3,opt,name=postive" json:"postive,omitempty"`
	Statehash   []byte `protobuf:"bytes,4,opt,name=statehash,proto3" json:"statehash,omitempty"`
	BlockHeight uint64 `protobuf:"varint,5,opt,name=blockHeight" json:"blockHeight,omitempty"`
}

func (m *SyncStateResp) Reset()                    { *m = SyncStateResp{} }
func (m *SyncStateResp) String() string            { return proto.CompactTextString(m) }
func (*SyncStateResp) ProtoMessage()               {}
func (*SyncStateResp) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{26} }

func (m *SyncStateResp) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SyncStateResp) GetPostive() bool {
	if m != nil {
		return m.Postive
	}
	return false
}

func (m *SyncStateResp) GetStatehash() []byte {
	if m != nil {
		return m.Statehash
	}
	return nil
}

func (m *SyncStateResp) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Transaction)(nil), "protos.Transaction")
	proto.RegisterType((*TransactionBlock)(nil), "protos.TransactionBlock")
	proto.RegisterType((*TransactionResult)(nil), "protos.TransactionResult")
	proto.RegisterType((*Block)(nil), "protos.Block")
	proto.RegisterType((*BlockchainInfo)(nil), "protos.BlockchainInfo")
	proto.RegisterType((*NonHashData)(nil), "protos.NonHashData")
	proto.RegisterType((*PeerAddress)(nil), "protos.PeerAddress")
	proto.RegisterType((*PeerID)(nil), "protos.PeerID")
	proto.RegisterType((*PeerEndpoint)(nil), "protos.PeerEndpoint")
	proto.RegisterType((*PeersMessage)(nil), "protos.PeersMessage")
	proto.RegisterType((*PeersAddresses)(nil), "protos.PeersAddresses")
	proto.RegisterType((*HelloMessage)(nil), "protos.HelloMessage")
	proto.RegisterType((*Gossip)(nil), "protos.Gossip")
	proto.RegisterType((*Gossip_Digest)(nil), "protos.Gossip.Digest")
	proto.RegisterType((*Gossip_Digest_PeerState)(nil), "protos.Gossip.Digest.PeerState")
	proto.RegisterType((*Gossip_Update)(nil), "protos.Gossip.Update")
	proto.RegisterType((*Gossip_Tx)(nil), "protos.Gossip_Tx")
	proto.RegisterType((*Message)(nil), "protos.Message")
	proto.RegisterType((*Response)(nil), "protos.Response")
	proto.RegisterType((*GlobalState)(nil), "protos.GlobalState")
	proto.RegisterType((*BlockState)(nil), "protos.BlockState")
	proto.RegisterType((*SyncBlockRange)(nil), "protos.SyncBlockRange")
	proto.RegisterType((*SyncBlocks)(nil), "protos.SyncBlocks")
	proto.RegisterType((*SyncStateSnapshotRequest)(nil), "protos.SyncStateSnapshotRequest")
	proto.RegisterType((*SyncStateSnapshot)(nil), "protos.SyncStateSnapshot")
	proto.RegisterType((*SyncStateDeltasRequest)(nil), "protos.SyncStateDeltasRequest")
	proto.RegisterType((*SyncStateDeltas)(nil), "protos.SyncStateDeltas")
	proto.RegisterType((*SyncMsg)(nil), "protos.SyncMsg")
	proto.RegisterType((*SyncStateQuery)(nil), "protos.SyncStateQuery")
	proto.RegisterType((*SyncStateResp)(nil), "protos.SyncStateResp")
	proto.RegisterEnum("protos.Transaction_Type", Transaction_Type_name, Transaction_Type_value)
	proto.RegisterEnum("protos.PeerEndpoint_Type", PeerEndpoint_Type_name, PeerEndpoint_Type_value)
	proto.RegisterEnum("protos.Message_Type", Message_Type_name, Message_Type_value)
	proto.RegisterEnum("protos.Response_StatusCode", Response_StatusCode_name, Response_StatusCode_value)
	proto.RegisterEnum("protos.SyncMsg_Type", SyncMsg_Type_name, SyncMsg_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Peer service

type PeerClient interface {
	// Accepts a stream of Message during chat session, while receiving
	// other Message (e.g. from other peers).
	Chat(ctx context.Context, opts ...grpc.CallOption) (Peer_ChatClient, error)
	// Request a new stream for bi-direction gossip
	// We must sent a peerId first for merging the stream with chatting,
	// This can't be achieve by protobuf and we had to imple it manually
	GossipIn(ctx context.Context, opts ...grpc.CallOption) (Peer_GossipInClient, error)
	// Request a new stream for state syncing
	SyncIn(ctx context.Context, opts ...grpc.CallOption) (Peer_SyncInClient, error)
	// Process a transaction from a remote source.
	ProcessTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Response, error)
}

type peerClient struct {
	cc *grpc.ClientConn
}

func NewPeerClient(cc *grpc.ClientConn) PeerClient {
	return &peerClient{cc}
}

func (c *peerClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Peer_ChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Peer_serviceDesc.Streams[0], c.cc, "/protos.Peer/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerChatClient{stream}
	return x, nil
}

type Peer_ChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type peerChatClient struct {
	grpc.ClientStream
}

func (x *peerChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peerChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peerClient) GossipIn(ctx context.Context, opts ...grpc.CallOption) (Peer_GossipInClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Peer_serviceDesc.Streams[1], c.cc, "/protos.Peer/GossipIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerGossipInClient{stream}
	return x, nil
}

type Peer_GossipInClient interface {
	Send(*Gossip) error
	Recv() (*Gossip, error)
	grpc.ClientStream
}

type peerGossipInClient struct {
	grpc.ClientStream
}

func (x *peerGossipInClient) Send(m *Gossip) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peerGossipInClient) Recv() (*Gossip, error) {
	m := new(Gossip)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peerClient) SyncIn(ctx context.Context, opts ...grpc.CallOption) (Peer_SyncInClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Peer_serviceDesc.Streams[2], c.cc, "/protos.Peer/SyncIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerSyncInClient{stream}
	return x, nil
}

type Peer_SyncInClient interface {
	Send(*SyncMsg) error
	Recv() (*SyncMsg, error)
	grpc.ClientStream
}

type peerSyncInClient struct {
	grpc.ClientStream
}

func (x *peerSyncInClient) Send(m *SyncMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peerSyncInClient) Recv() (*SyncMsg, error) {
	m := new(SyncMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peerClient) ProcessTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/protos.Peer/ProcessTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Peer service

type PeerServer interface {
	// Accepts a stream of Message during chat session, while receiving
	// other Message (e.g. from other peers).
	Chat(Peer_ChatServer) error
	// Request a new stream for bi-direction gossip
	// We must sent a peerId first for merging the stream with chatting,
	// This can't be achieve by protobuf and we had to imple it manually
	GossipIn(Peer_GossipInServer) error
	// Request a new stream for state syncing
	SyncIn(Peer_SyncInServer) error
	// Process a transaction from a remote source.
	ProcessTransaction(context.Context, *Transaction) (*Response, error)
}

func RegisterPeerServer(s *grpc.Server, srv PeerServer) {
	s.RegisterService(&_Peer_serviceDesc, srv)
}

func _Peer_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerServer).Chat(&peerChatServer{stream})
}

type Peer_ChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type peerChatServer struct {
	grpc.ServerStream
}

func (x *peerChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peerChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Peer_GossipIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerServer).GossipIn(&peerGossipInServer{stream})
}

type Peer_GossipInServer interface {
	Send(*Gossip) error
	Recv() (*Gossip, error)
	grpc.ServerStream
}

type peerGossipInServer struct {
	grpc.ServerStream
}

func (x *peerGossipInServer) Send(m *Gossip) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peerGossipInServer) Recv() (*Gossip, error) {
	m := new(Gossip)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Peer_SyncIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerServer).SyncIn(&peerSyncInServer{stream})
}

type Peer_SyncInServer interface {
	Send(*SyncMsg) error
	Recv() (*SyncMsg, error)
	grpc.ServerStream
}

type peerSyncInServer struct {
	grpc.ServerStream
}

func (x *peerSyncInServer) Send(m *SyncMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peerSyncInServer) Recv() (*SyncMsg, error) {
	m := new(SyncMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Peer_ProcessTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).ProcessTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Peer/ProcessTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).ProcessTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Peer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Peer",
	HandlerType: (*PeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessTransaction",
			Handler:    _Peer_ProcessTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Peer_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GossipIn",
			Handler:       _Peer_GossipIn_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SyncIn",
			Handler:       _Peer_SyncIn_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fabric.proto",
}

func init() { proto.RegisterFile("fabric.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1973 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x18, 0x4b, 0x6f, 0xdb, 0xc8,
	0xd9, 0xd4, 0xd3, 0xfa, 0xf4, 0x30, 0x3d, 0x71, 0x1c, 0x46, 0x9b, 0x66, 0x0d, 0xb6, 0x45, 0xdd,
	0x20, 0xd5, 0x06, 0x0e, 0x82, 0x04, 0x01, 0x5a, 0xac, 0x2c, 0xd1, 0xb1, 0x10, 0x9b, 0x72, 0x86,
	0x72, 0xb6, 0xe9, 0xa1, 0x06, 0x4d, 0x4e, 0x64, 0x22, 0x14, 0xa9, 0xe5, 0x50, 0x46, 0x7c, 0xed,
	0xa9, 0xe8, 0x8f, 0xe8, 0xa5, 0xc7, 0x1e, 0x7b, 0xee, 0xb5, 0xed, 0x4f, 0x68, 0xd1, 0x7f, 0xd0,
	0x4b, 0x2f, 0x05, 0x7a, 0x2d, 0xe6, 0x41, 0x8a, 0xa4, 0xe4, 0xdd, 0xa4, 0x17, 0x7b, 0xbe, 0xd7,
	0xcc, 0xf7, 0xfe, 0x3e, 0x0a, 0x5a, 0xef, 0xed, 0xcb, 0xc8, 0x73, 0x7a, 0xf3, 0x28, 0x8c, 0x43,
	0x54, 0xe3, 0xff, 0x68, 0x77, 0xcb, 0xb9, 0xb2, 0xbd, 0xc0, 0x09, 0x5d, 0x22, 0x08, 0xdd, 0x9d,
	0x14, 0x41, 0xae, 0x49, 0x10, 0x4b, 0xec, 0x97, 0xd3, 0x30, 0x9c, 0xfa, 0xe4, 0x2b, 0x0e, 0x5d,
	0x2e, 0xde, 0x7f, 0x15, 0x7b, 0x33, 0x42, 0x63, 0x7b, 0x36, 0x17, 0x0c, 0xfa, 0xdf, 0x2b, 0xd0,
	0x9c, 0x44, 0x76, 0x40, 0x6d, 0x27, 0xf6, 0xc2, 0x00, 0x3d, 0x86, 0x4a, 0x7c, 0x33, 0x27, 0x9a,
	0xb2, 0xa7, 0xec, 0x77, 0x0e, 0x34, 0xc1, 0x45, 0x7b, 0x19, 0x96, 0xde, 0xe4, 0x66, 0x4e, 0x30,
	0xe7, 0x42, 0x7b, 0xd0, 0x4c, 0x9f, 0x1d, 0x0d, 0xb5, 0xd2, 0x9e, 0xb2, 0xdf, 0xc2, 0x59, 0x14,
	0xd2, 0xa0, 0x3e, 0xb7, 0x6f, 0xfc, 0xd0, 0x76, 0xb5, 0x32, 0xa7, 0x26, 0x20, 0xea, 0xc2, 0xe6,
	0x8c, 0xc4, 0xb6, 0x6b, 0xc7, 0xb6, 0x56, 0xe1, 0xa4, 0x14, 0x46, 0x08, 0x2a, 0xf1, 0x47, 0xcf,
	0xd5, 0xaa, 0x7b, 0xca, 0x7e, 0x03, 0xf3, 0x33, 0x7a, 0x01, 0x8d, 0x54, 0x79, 0xad, 0xb6, 0xa7,
	0xec, 0x37, 0x0f, 0xba, 0x3d, 0x61, 0x5e, 0x2f, 0x31, 0xaf, 0x37, 0x49, 0x38, 0xf0, 0x92, 0x19,
	0x9d, 0xc1, 0x8e, 0x13, 0x06, 0xef, 0x3d, 0x97, 0x04, 0xb1, 0x67, 0xfb, 0x5e, 0x7c, 0x73, 0x42,
	0xae, 0x89, 0xaf, 0xd5, 0xb9, 0x8d, 0x0f, 0x12, 0x1b, 0x07, 0x6b, 0x78, 0xf0, 0x5a, 0x49, 0x74,
	0x04, 0x0f, 0x0b, 0xf8, 0x33, 0x76, 0x87, 0x13, 0xfa, 0x6f, 0x49, 0x44, 0xbd, 0x30, 0xd0, 0x36,
	0xb9, 0xe6, 0xdf, 0xc3, 0x85, 0x76, 0xa0, 0x1a, 0x84, 0x81, 0x43, 0xb4, 0x06, 0x77, 0x80, 0x00,
	0x90, 0x0e, 0xad, 0x38, 0x7c, 0x6b, 0xfb, 0x9e, 0x6b, 0xc7, 0x61, 0x44, 0x35, 0xe0, 0xc4, 0x1c,
	0x8e, 0x79, 0xc8, 0x21, 0x51, 0xac, 0x35, 0x39, 0x8d, 0x9f, 0xd1, 0x03, 0x68, 0x50, 0x6f, 0x1a,
	0xd8, 0xf1, 0x22, 0x22, 0x5a, 0x8b, 0x13, 0x96, 0x08, 0x3d, 0x84, 0x0a, 0x8b, 0x1c, 0x6a, 0x43,
	0xe3, 0xdc, 0x1c, 0x1a, 0x47, 0x23, 0xd3, 0x18, 0xaa, 0x1b, 0x68, 0x07, 0xd4, 0xc1, 0x71, 0x7f,
	0x64, 0x0e, 0xc6, 0x43, 0xe3, 0x62, 0x68, 0x9c, 0x9d, 0x8c, 0xdf, 0xa9, 0x4a, 0x1e, 0x3b, 0x32,
	0xdf, 0x8e, 0x5f, 0x1b, 0x6a, 0x09, 0xdd, 0x81, 0xad, 0x25, 0xf6, 0xcd, 0xb9, 0x81, 0xdf, 0xa9,
	0x65, 0x74, 0x0f, 0xee, 0x2c, 0x91, 0x13, 0x03, 0x9f, 0x8e, 0xcc, 0xfe, 0xc4, 0x50, 0x2b, 0xfa,
	0x6b, 0x50, 0x33, 0x69, 0x73, 0xe8, 0x87, 0xce, 0x07, 0xf4, 0x1c, 0x5a, 0xf1, 0x12, 0x47, 0x35,
	0x65, 0xaf, 0xbc, 0xdf, 0x3c, 0xb8, 0xb3, 0x26, 0xcd, 0x70, 0x8e, 0x51, 0xff, 0x93, 0x02, 0xdb,
	0x59, 0x2a, 0xa1, 0x0b, 0x3f, 0x4e, 0xf3, 0x44, 0xc9, 0xe4, 0xc9, 0x2e, 0xd4, 0x22, 0x4e, 0x95,
	0xe9, 0x28, 0x21, 0xe6, 0x1d, 0x12, 0x45, 0x61, 0x34, 0x08, 0x5d, 0xc2, 0x73, 0xb1, 0x8d, 0x97,
	0x08, 0x16, 0x09, 0x0e, 0xf0, 0x54, 0x6c, 0x60, 0x01, 0xa0, 0x5f, 0x40, 0x27, 0x4d, 0x66, 0x83,
	0x95, 0x15, 0xcf, 0xc8, 0xe6, 0xc1, 0x6e, 0x9a, 0x33, 0x39, 0x2a, 0x2e, 0x70, 0xeb, 0xff, 0x2c,
	0x41, 0x55, 0x18, 0xae, 0x41, 0xfd, 0x5a, 0xa6, 0x86, 0xc2, 0xdf, 0x4e, 0xc0, 0x7c, 0x5e, 0x97,
	0x3e, 0x27, 0xaf, 0x8b, 0xce, 0x2c, 0x7f, 0xa2, 0x33, 0x79, 0xa2, 0xc4, 0x76, 0x4c, 0x8e, 0x6d,
	0x7a, 0x25, 0x6b, 0x6f, 0x89, 0x40, 0x8f, 0x61, 0x7b, 0x1e, 0x91, 0x6b, 0x2f, 0x5c, 0x50, 0xae,
	0x3b, 0xe7, 0xaa, 0x72, 0xae, 0x55, 0x02, 0xe3, 0x76, 0xc2, 0x80, 0x92, 0x80, 0x2e, 0xe8, 0x69,
	0x52, 0xcf, 0x35, 0xc1, 0xbd, 0x42, 0x40, 0xcf, 0xa0, 0x19, 0x84, 0x01, 0x13, 0x1c, 0x32, 0xbe,
	0x3a, 0x37, 0x37, 0xd5, 0xd8, 0x5c, 0x92, 0x70, 0x96, 0x8f, 0x45, 0x87, 0xc5, 0x96, 0x6a, 0x9b,
	0x7b, 0x65, 0x16, 0x1d, 0x0e, 0xe8, 0xbf, 0x51, 0xa0, 0xc3, 0x15, 0xe1, 0x5e, 0x1f, 0x05, 0xef,
	0x43, 0x16, 0xfc, 0x2b, 0xe2, 0x4d, 0xaf, 0x62, 0xee, 0xe5, 0x0a, 0x96, 0x10, 0x7a, 0x04, 0xaa,
	0xb3, 0x88, 0x22, 0x12, 0xc4, 0x4b, 0x93, 0x44, 0x7a, 0xac, 0xe0, 0xd7, 0xdb, 0x5f, 0xbe, 0xc5,
	0x7e, 0xfd, 0x8f, 0x0a, 0x34, 0x33, 0x7a, 0xa3, 0x5f, 0x41, 0xd7, 0x0f, 0x1d, 0xdb, 0x3f, 0x21,
	0xee, 0x94, 0x44, 0x83, 0x70, 0x36, 0xf3, 0xe2, 0x34, 0x7a, 0x5c, 0xab, 0xef, 0x8e, 0xef, 0x77,
	0x48, 0xa3, 0xaf, 0x61, 0x2b, 0x9f, 0x60, 0x54, 0x2b, 0xf1, 0x98, 0xdf, 0x96, 0x8f, 0x45, 0x76,
	0xfd, 0x19, 0x34, 0xcf, 0x08, 0x89, 0xfa, 0xae, 0x1b, 0x11, 0xca, 0xbb, 0xc8, 0x55, 0x48, 0xe3,
	0xa4, 0x7e, 0xd8, 0x99, 0xe1, 0xe6, 0x61, 0x24, 0xaa, 0xa7, 0x8a, 0xf9, 0x59, 0x7f, 0x00, 0x35,
	0x26, 0x36, 0x1a, 0x32, 0x6a, 0x60, 0xcf, 0x48, 0x22, 0xc1, 0xce, 0xfa, 0x5f, 0x14, 0x68, 0x31,
	0xb2, 0x11, 0xb8, 0xf3, 0xd0, 0x0b, 0x62, 0xf4, 0x10, 0x4a, 0xa3, 0xa1, 0xb4, 0xb5, 0x93, 0xa8,
	0x26, 0x2e, 0xc0, 0x25, 0x31, 0x14, 0x6c, 0xa1, 0x01, 0x7f, 0xa5, 0x81, 0x13, 0x10, 0xfd, 0x4c,
	0x8e, 0x9f, 0x32, 0x6f, 0xcd, 0xf7, 0xb3, 0xb2, 0xc9, 0xed, 0xd9, 0xf9, 0xb3, 0x03, 0xd5, 0xf9,
	0x07, 0x6f, 0x34, 0x94, 0x49, 0x2c, 0x00, 0xfd, 0xf9, 0xfa, 0x4e, 0xd7, 0x86, 0xc6, 0xdb, 0xfe,
	0xc9, 0x68, 0xd8, 0x9f, 0x8c, 0xb1, 0xaa, 0xa0, 0x6d, 0x68, 0x9b, 0x63, 0xf3, 0x62, 0x89, 0x2a,
	0xe9, 0x2f, 0x85, 0x1d, 0xf4, 0x94, 0x50, 0x6a, 0x4f, 0x09, 0x7a, 0x04, 0xd5, 0x39, 0x83, 0x65,
	0x9b, 0xda, 0x59, 0xa7, 0x0e, 0x16, 0x2c, 0x7a, 0x0f, 0x3a, 0x5c, 0x56, 0xba, 0x96, 0xf0, 0x2a,
	0xb3, 0x13, 0x80, 0xdf, 0xd0, 0xc0, 0x4b, 0x84, 0xfe, 0x5b, 0x05, 0x5a, 0xc7, 0xc4, 0xf7, 0xc3,
	0xe4, 0xb1, 0x17, 0xd0, 0x9a, 0x67, 0xee, 0x95, 0xee, 0x5b, 0xff, 0x66, 0x8e, 0x93, 0x75, 0xa9,
	0xcb, 0x5c, 0x19, 0xc8, 0x36, 0x92, 0x66, 0x45, 0xbe, 0x48, 0x70, 0x81, 0x5b, 0xff, 0x7d, 0x19,
	0x6a, 0xaf, 0x42, 0x4a, 0xbd, 0x39, 0x52, 0xa1, 0x4c, 0xc9, 0xb7, 0xb2, 0x78, 0xd8, 0x91, 0xc5,
	0xca, 0xb1, 0x63, 0xdb, 0x0f, 0xa7, 0x49, 0xac, 0x24, 0x88, 0x7e, 0x0a, 0x65, 0xd7, 0x9b, 0xf2,
	0x50, 0x35, 0x0f, 0xee, 0x26, 0x6f, 0x89, 0x8b, 0x7a, 0x43, 0x6f, 0x4a, 0x68, 0x7c, 0xbc, 0x81,
	0x19, 0x0f, 0xfa, 0x09, 0x94, 0x16, 0x2e, 0x0f, 0xd2, 0x2a, 0xe7, 0xf9, 0xdc, 0x65, 0x9d, 0x67,
	0x03, 0x97, 0x16, 0x6e, 0xf7, 0x5f, 0x0a, 0xd4, 0x84, 0x28, 0x7a, 0x0a, 0x15, 0xde, 0x4b, 0x84,
	0xef, 0xbf, 0x5c, 0x7b, 0x7f, 0x8f, 0x95, 0x9c, 0x11, 0xc4, 0xd1, 0x0d, 0xe6, 0xcc, 0xdd, 0x37,
	0xd0, 0x60, 0x8e, 0xb2, 0x58, 0x33, 0x63, 0xd9, 0xc1, 0xbb, 0x1a, 0x37, 0xa7, 0x85, 0x05, 0xc0,
	0x4c, 0x0c, 0x16, 0x33, 0x6e, 0x4c, 0x05, 0xb3, 0x63, 0x7e, 0x6e, 0x56, 0x0b, 0x73, 0xb3, 0xfb,
	0x4b, 0x68, 0xa4, 0xaf, 0x30, 0xe1, 0x0f, 0xe4, 0x46, 0x66, 0x3f, 0x3b, 0xa2, 0x67, 0x50, 0xbd,
	0xb6, 0xfd, 0x05, 0x91, 0x3e, 0xbf, 0x45, 0xcf, 0x54, 0x29, 0x2c, 0xb8, 0x5f, 0x96, 0x5e, 0x28,
	0x5d, 0x1d, 0x6a, 0xc2, 0xf8, 0xec, 0x96, 0xa4, 0xe4, 0xb6, 0xa4, 0xc3, 0x32, 0x28, 0x33, 0xfd,
	0x02, 0x1a, 0xe2, 0xba, 0x8b, 0xc9, 0xc7, 0xef, 0xb7, 0xaa, 0x2d, 0xac, 0x7a, 0x04, 0xe5, 0xf8,
	0x23, 0x95, 0x4e, 0x5f, 0xb7, 0xc8, 0xf1, 0xac, 0xc0, 0x8c, 0x49, 0xff, 0x77, 0x19, 0xea, 0x49,
	0x1e, 0xee, 0xe7, 0x36, 0xc0, 0x34, 0xff, 0x24, 0x39, 0x5b, 0x7d, 0xff, 0xff, 0xe4, 0xba, 0x7d,
	0x2b, 0xcc, 0xc5, 0xa2, 0x52, 0xdc, 0x61, 0xfe, 0x5a, 0x5a, 0x5f, 0xda, 0x1d, 0x80, 0xe1, 0xc8,
	0x1a, 0x5c, 0x1c, 0x1b, 0x27, 0x27, 0x63, 0x55, 0x61, 0x8b, 0x0a, 0x87, 0xd9, 0x9f, 0xb1, 0x69,
	0x1a, 0x83, 0x89, 0x5a, 0x42, 0x08, 0x3a, 0x1c, 0xf9, 0xca, 0x98, 0x5c, 0x9c, 0x19, 0x06, 0xb6,
	0xd4, 0x72, 0x2a, 0x28, 0xe0, 0x0a, 0xda, 0x82, 0x26, 0x87, 0x4d, 0xe3, 0x9b, 0x53, 0xeb, 0x95,
	0x5a, 0x45, 0x77, 0x61, 0x9b, 0x6f, 0x37, 0x17, 0x13, 0xdc, 0x37, 0xad, 0xfe, 0x60, 0x32, 0x1a,
	0x9b, 0x6a, 0x8d, 0x3d, 0x60, 0xbd, 0x33, 0xc5, 0x5d, 0x87, 0x27, 0xe3, 0xc1, 0x6b, 0x4b, 0x6d,
	0x32, 0x61, 0x8e, 0x94, 0x88, 0x16, 0xdb, 0xa2, 0x96, 0x88, 0x8b, 0xfe, 0x70, 0x68, 0x0c, 0xd5,
	0x36, 0xfa, 0x02, 0xee, 0x71, 0xac, 0x35, 0xe9, 0x4f, 0x0c, 0x7e, 0x83, 0x65, 0xf6, 0xcf, 0xac,
	0xe3, 0xf1, 0x44, 0xed, 0xb0, 0x6d, 0x2a, 0x43, 0x4c, 0x09, 0x5b, 0xe8, 0x3e, 0xdc, 0x2d, 0x48,
	0x0d, 0x8d, 0x93, 0x49, 0xdf, 0x52, 0x55, 0xa6, 0x63, 0x86, 0x24, 0xd1, 0xdb, 0xa8, 0x05, 0x9b,
	0xd8, 0xb0, 0xce, 0xc6, 0xa6, 0x65, 0xa8, 0x3b, 0xcc, 0x63, 0x03, 0x76, 0x34, 0xad, 0x73, 0x4b,
	0xbd, 0xab, 0xff, 0x4e, 0x81, 0x4d, 0x4c, 0xe8, 0x9c, 0x4d, 0x68, 0xf4, 0x14, 0x6a, 0x2c, 0x8b,
	0x16, 0x54, 0x06, 0xfd, 0x8b, 0x24, 0xe8, 0x09, 0x47, 0xcf, 0xe2, 0x64, 0xb6, 0x29, 0x61, 0xc9,
	0xca, 0x32, 0x6e, 0x46, 0xa7, 0x72, 0x8a, 0xb2, 0xa3, 0xfe, 0x1c, 0x60, 0xc9, 0x57, 0x0c, 0x51,
	0x0b, 0xea, 0xd6, 0xf9, 0x60, 0x60, 0x58, 0x96, 0xfa, 0x37, 0x85, 0x41, 0x47, 0xfd, 0xd1, 0xc9,
	0x39, 0x36, 0xd4, 0xff, 0x94, 0xf5, 0xff, 0x2a, 0xd0, 0x7c, 0xe5, 0x87, 0x97, 0xb6, 0x9f, 0x16,
	0xae, 0x13, 0x2e, 0x82, 0x64, 0x88, 0x0b, 0x80, 0xcd, 0xe5, 0x80, 0x7c, 0x8c, 0xcd, 0xd0, 0x25,
	0x56, 0xba, 0xbd, 0xb0, 0x9d, 0xa7, 0x85, 0x57, 0x09, 0xe8, 0x09, 0xdc, 0x99, 0xdb, 0x6c, 0xb0,
	0xe7, 0xf9, 0x2b, 0x9c, 0x7f, 0x1d, 0x09, 0xbd, 0x80, 0x7b, 0xbe, 0x4d, 0xe3, 0xc3, 0xc8, 0x0e,
	0x9c, 0xab, 0xbc, 0x94, 0x68, 0x0a, 0xb7, 0x91, 0x99, 0x24, 0x53, 0x60, 0x9d, 0x64, 0x5d, 0x48,
	0xde, 0x42, 0xd6, 0xdf, 0x00, 0xf0, 0x32, 0x14, 0x76, 0xff, 0x10, 0xaa, 0xbc, 0x35, 0xcb, 0xde,
	0xdf, 0xce, 0xf5, 0x6f, 0x2c, 0x68, 0xe8, 0x21, 0x00, 0x2f, 0xf9, 0x21, 0xf1, 0x63, 0x5b, 0xba,
	0x3f, 0x83, 0xd1, 0x7f, 0x0d, 0x1d, 0xeb, 0x26, 0x70, 0x84, 0x8c, 0x1d, 0x4c, 0x09, 0xfa, 0x11,
	0xb4, 0x9d, 0x30, 0x8a, 0x88, 0x6f, 0xb3, 0xb2, 0x1f, 0xb9, 0xd2, 0xad, 0x79, 0xa4, 0xec, 0x2b,
	0x72, 0xf0, 0x57, 0xb0, 0x00, 0x58, 0x94, 0x49, 0x20, 0xaa, 0xb4, 0x82, 0xd9, 0x51, 0xb7, 0x01,
	0xd2, 0xfb, 0x29, 0x7a, 0x0c, 0xd5, 0x88, 0x3d, 0x22, 0x55, 0x4e, 0x47, 0x4e, 0x5e, 0x05, 0x2c,
	0x98, 0xd0, 0x8f, 0xa1, 0xc6, 0x8d, 0x48, 0xf6, 0x96, 0x82, 0x85, 0x92, 0xa8, 0x7f, 0x0d, 0x1a,
	0x93, 0xe7, 0x4e, 0xb1, 0x02, 0x7b, 0x4e, 0xaf, 0xc2, 0x18, 0x93, 0x6f, 0x17, 0x6c, 0x2c, 0x7c,
	0x92, 0x31, 0xfa, 0x1f, 0x14, 0xd8, 0x5e, 0xb9, 0x82, 0x99, 0xe8, 0x72, 0xaf, 0xc9, 0xd6, 0xc9,
	0x01, 0xf6, 0x21, 0x4a, 0xd9, 0xe5, 0xec, 0x3b, 0x4c, 0xd8, 0x9e, 0xc2, 0xec, 0x03, 0x97, 0xeb,
	0x64, 0x2e, 0x66, 0x97, 0x24, 0x92, 0x6e, 0xc8, 0xa2, 0xd0, 0x4b, 0xa8, 0x47, 0x42, 0x35, 0xd9,
	0x6a, 0xf7, 0xb2, 0x2e, 0x58, 0x67, 0x02, 0x4e, 0x04, 0xf4, 0x23, 0xd8, 0x4d, 0x99, 0x78, 0xf0,
	0x68, 0x62, 0xe5, 0x67, 0xb9, 0x55, 0xff, 0x06, 0xb6, 0x0a, 0xf7, 0x7c, 0x66, 0x5c, 0x76, 0xa1,
	0xc6, 0x7d, 0x21, 0xe2, 0xd2, 0xc2, 0x12, 0xd2, 0xff, 0x5c, 0x86, 0x3a, 0x93, 0x38, 0xa5, 0xd3,
	0xdb, 0xe6, 0x82, 0x24, 0x67, 0xe7, 0xc2, 0x4a, 0x88, 0x4a, 0xeb, 0xf2, 0xed, 0xd6, 0x19, 0x70,
	0x6b, 0x97, 0xcf, 0xf7, 0x39, 0x73, 0x3c, 0x19, 0x1d, 0xb1, 0x6f, 0x55, 0x04, 0x9d, 0x0c, 0x7a,
	0x7c, 0xc6, 0x7a, 0xfd, 0x2e, 0x20, 0x81, 0x33, 0x2c, 0x6b, 0x34, 0x36, 0x19, 0x0d, 0x4f, 0xd4,
	0xea, 0x0a, 0x5e, 0x7c, 0xc4, 0xd6, 0x96, 0xdd, 0x55, 0xe2, 0xd3, 0xc6, 0x59, 0x4f, 0x9b, 0x78,
	0x42, 0x32, 0xcc, 0xa1, 0xba, 0xb9, 0x6c, 0xe2, 0x12, 0x9b, 0x1b, 0x04, 0x69, 0x13, 0x97, 0xc4,
	0x74, 0x20, 0xfc, 0x00, 0xee, 0xaf, 0x48, 0x65, 0x9a, 0x7f, 0x51, 0x8b, 0x4c, 0xfb, 0x5f, 0xf7,
	0x5e, 0x3a, 0x00, 0x8a, 0xef, 0x25, 0x23, 0x40, 0x3f, 0x14, 0xbd, 0x80, 0x27, 0xc6, 0x9b, 0x05,
	0x89, 0x6e, 0x50, 0x07, 0x4a, 0xf2, 0x7b, 0xb9, 0x8d, 0x4b, 0x9e, 0x9b, 0x26, 0xf8, 0xb1, 0xf8,
	0x6a, 0x2a, 0x65, 0x12, 0x5c, 0xa0, 0xf4, 0x1b, 0x68, 0xa7, 0x77, 0xb0, 0x79, 0xb0, 0x72, 0x05,
	0x0b, 0x64, 0x48, 0x63, 0xef, 0x5a, 0xac, 0xed, 0x9b, 0x38, 0x01, 0xd3, 0xef, 0xcc, 0xab, 0xe2,
	0x77, 0x26, 0x43, 0x14, 0x9f, 0xae, 0xae, 0x3c, 0x7d, 0xf0, 0x0f, 0x05, 0x2a, 0x6c, 0x73, 0x42,
	0x3d, 0xa8, 0x0c, 0xae, 0xec, 0x18, 0x6d, 0x15, 0xb6, 0x91, 0x6e, 0x11, 0xa1, 0x6f, 0xec, 0x2b,
	0x4f, 0x14, 0xf4, 0x04, 0x36, 0xc5, 0xc2, 0x34, 0x0a, 0x50, 0x27, 0xbf, 0x91, 0x75, 0x0b, 0x70,
	0x2a, 0x51, 0x63, 0x56, 0x8e, 0x82, 0xe5, 0x1b, 0x32, 0xb3, 0xbb, 0x45, 0x84, 0x94, 0xf8, 0x39,
	0xa0, 0xb3, 0x28, 0x74, 0x08, 0xa5, 0xd9, 0xdf, 0xcf, 0xd6, 0x7d, 0x7d, 0x77, 0xd5, 0xe2, 0x3c,
	0xd5, 0x37, 0x2e, 0xc5, 0x0f, 0x79, 0x4f, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x2a, 0x1f,
	0x67, 0xdf, 0x13, 0x00, 0x00,
}
